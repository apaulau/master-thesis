geom_histogram(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
plot.hist <- plot.hist + stat_function(fun=dnorm, colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
plot.data.hist <- DrawHistogram(data=research.data, filename="original/histogram.png")
library(ggplot2)  # eye-candy graphs
plot.data.hist <- DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
stat_bin(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
plot.hist <- plot.hist + stat_function(fun=dnorm, colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
stat_bin(aes(y=..density..), colour="darkgrey", fill="white", alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
plot.hist <- plot.hist + stat_function(fun=dnorm, colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram(data=research.data, filename="original/histogram.png")
data
data = research.data
grid <- with(data, seq(min(temperature), max(temperature), length = kObservationNum))
grid
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
library(ddply)
library(ddply2)
library(dplyr)
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
library(plyr)
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
normaldens
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
stat_bin(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
grid <- with(data, seq(min(year), max(year), length = kObservationNum))
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
plot.hist <- plot.hist + geom_line(data=normaldens, aes(x=predicted, y=density), colour=#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
stat_bin(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
grid <- with(data, seq(min(year), max(year), length = kObservationNum))
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
plot.hist <- plot.hist + geom_line(data=normaldens, aes(x=predicted, y=density), colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
geom_histogram(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
grid <- with(data, seq(min(year), max(year), length = kObservationNum))
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
plot.hist <- plot.hist + geom_line(data=normaldens, aes(x=predicted, y=density), colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
geom_histogram(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
plot.hist <- plot.hist + stat_function(fun=dnorm, colour="#D55E00", arg=list(mean=mean(data$temperature), sd=sd(data$temperature)))
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
source('~/study/bachelors-thesis/R/lib/afv.r', echo=TRUE)
source('~/study/bachelors-thesis/R/lib/afv.r', echo=TRUE)
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
DrawHScatterplot <- function (data, cutoff=trunc(2 * kObservationNum / 3)) {
# Make fake second coordinate
p <- data.frame("X"=c(1:kObservationNum), "Y"=rep(1, kObservationNum))
# Calculate distances
p.dist<-as.matrix(dist(p[,c("X", "Y")]))
dist.breaks<-quantile(p.dist,seq(.1, .9, by=.1))
coordinates(p) <- ~ X + Y
p.breaks <- (0:cutoff) * 1
Residuals <- data
hsc <- hscat(Residuals~1, p, breaks=0:20)
pdf("figures/residual/hscat.pdf", width=7, height=4)
print(hsc)
dev.off()
hsc
}
kObservationNum <- 32
## Form the data for research again
research.data <- src.data[0:kObservationNum, ]
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.residuals <- research.data.fit$residuals
research.data.trend <- computeTrend(research.data.fit)
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
#cutoff <- 2
# Draw H-Scatterplot
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], cutoff)
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], cutoff+1)
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], cutoff+2)
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], 22)
DrawHScatterplot <- function (data, cutoff=trunc(2 * kObservationNum / 3)) {
# Make fake second coordinate
p <- data.frame("X"=c(1:kObservationNum), "Y"=rep(1, kObservationNum))
# Calculate distances
p.dist<-as.matrix(dist(p[,c("X", "Y")]))
dist.breaks<-quantile(p.dist,seq(.1, .9, by=.1))
coordinates(p) <- ~ X + Y
p.breaks <- (0:cutoff) * 1
Residuals <- data
hsc <- hscat(Residuals~1, p, breaks=0:20)
pdf("figures/residual/hscat.pdf", width=7, height=5)
print(hsc)
dev.off()
hsc
}
kObservationNum <- 32
## Form the data for research again
research.data <- src.data[0:kObservationNum, ]
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.residuals <- research.data.fit$residuals
research.data.trend <- computeTrend(research.data.fit)
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
#cutoff <- 2
# Draw H-Scatterplot
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], cutoff)
# Compute variogram manually with choosed model (best what i could found)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, file=TRUE, file_modeled="figures/variogram/manual-model.png")
# Compute variogram with auto fit model using classical estimation
variogram.classical <- ComputeVariogram(data=research.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=FALSE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/classical-empirical.png",
file_modeled="figures/variogram/classical-modeled.png")
# Compute variogram with auto fit model using robust (cressie) estimation
variogram.robust <- ComputeVariogram(data=src.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=TRUE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/robust-empirical.png",
file_modeled="figures/variogram/robust-modeled.png")
models.comparison <- CompareClassicalModels(variogram.manual, variogram.classical, filename="figures/variogram/models-comparison.png")
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, file=TRUE, file_modeled="figures/variogram/manual-model.png")
# Compute variogram with auto fit model using classical estimation
variogram.classical <- ComputeVariogram(data=research.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=FALSE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/classical-empirical.png",
file_modeled="figures/variogram/classical-modeled.png")
# Compute variogram with auto fit model using robust (cressie) estimation
variogram.robust <- ComputeVariogram(data=src.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=TRUE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/robust-empirical.png",
file_modeled="figures/variogram/robust-modeled.png")
models.comparison <- CompareClassicalModels(variogram.manual, variogram.classical, filename="figures/variogram/models-comparison.png")
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
kriging.classical <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.classical$var_model)
kriging.robust    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.robust$var_model)
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
variogram.robust <- ComputeVariogram(data=research.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=TRUE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/robust-empirical.png",
file_modeled="figures/variogram/robust-modeled.png")
models.comparison <- CompareClassicalModels(variogram.manual, variogram.classical, filename="figures/variogram/models-comparison.png")
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
kriging.classical <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.classical$var_model)
kriging.robust    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.robust$var_model)
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual))
mse.classical <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.classical))
mse.robust    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust))
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
)
research.residuals.prediction.manual <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное(вр)"=kriging.manual$var1.pred+research.data.trend)
research.residuals.prediction.manual <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное(вр)"=kriging.manual$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(research.residuals.prediction.manual, caption="Сравнение прогнозных значений", label="table:prediction_manual", digits=c(0, 0, 2, 2)),
file="out/residual/prediction-manual.tex")
research.residuals.prediction.manual <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное(вр)"=kriging.manual$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(research.residuals.prediction.manual, caption="Сравнение прогнозных значений", label="table:prediction_manual", digits=c(0, 0, 2, 2)),
file="out/variogram/prediction-manual.tex")
research.residuals.prediction.manual <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=kriging.manual$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(research.residuals.prediction.manual, caption="Прогноз (сферическая модель)", label="table:prediction_manual", digits=c(0, 0, 2, 2)),
file="out/variogram/prediction-manual.tex")
print(xtable(research.residuals.prediction.manual, caption="Прогноз (сферическая модель)", label="table:prediction_manual", digits=c(0, 0, 2, 2, 2)),
file="out/variogram/prediction-manual.tex")
research.residuals.prediction.classical <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=kriging.classical$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(research.residuals.prediction.manual, caption="Прогноз (классическая оценка)", label="table:prediction_classical", digits=c(0, 0, 2, 2, 2)),
file="out/variogram/prediction-classical.tex")
kriging.classical$var1.pred
prediction.classical <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=kriging.classical$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.manual, caption="Прогноз (классическая оценка)", label="table:prediction_classical", digits=c(0, 0, 3, 3, 3)),
file="out/variogram/prediction-classical.tex")
prediction.classical <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=kriging.classical$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.classical, caption="Прогноз (классическая оценка)", label="table:prediction_classical", digits=c(0, 0, 3, 3, 3)),
file="out/variogram/prediction-classical.tex")
prediction.manual <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=kriging.manual$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.manual, caption="Прогноз (сферическая модель)", label="table:prediction_manual", digits=c(0, 0, 3, 3, 3)),
file="out/variogram/prediction-manual.tex")
prediction.classical <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=kriging.classical$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.classical, caption="Прогноз (классическая оценка)", label="table:prediction_classical", digits=c(0, 0, 3, 3, 3)),
file="out/variogram/prediction-classical.tex")
prediction.robust <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдаемое"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=kriging.classical$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.robust, caption="Прогноз (робастная оценка)", label="table:prediction_robust", digits=c(0, 0, 3, 3, 3)),
file="out/variogram/prediction-robust.tex")
WriteCharacteristic(res.manual, type="variogram", name="manual-mse")
res.manual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual,    "figures/variogram/cross-prediction-manual.png")
res.classical <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.classical, "figures/variogram/cross-prediction-classical.png")
res.robust <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust,    "figures/variogram/cross-prediction-robust.png")
WriteCharacteristic(res.manual, type="variogram", name="manual-mse")
WriteCharacteristic(res.classical, type="variogram", name="classical-mse")
WriteCharacteristic(res.robust, type="variogram", name="robust-mse")
res.manual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual,    "figures/variogram/cross-prediction-manual.png")
res.classical <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.classical, "figures/variogram/cross-prediction-classical.png")
res.robust <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust,    "figures/variogram/cross-prediction-robust.png")
mse.manual    <- MSE(res.manual)
mse.classical <- MSE(res.classical)
mse.robust    <- MSE(res.robust)
WriteCharacteristic(mse.manual, type="variogram", name="manual-mse")
WriteCharacteristic(mse.classical, type="variogram", name="classical-mse")
WriteCharacteristic(mse.robust, type="variogram", name="robust-mse")
ComputeManualVariogram <- function (data, cutoff, model="Sph", file=FALSE, file_modeled="") {
# Make fake second coordinate
p <- data.frame("X"=c(1:kObservationNum), "Y"=rep(1, kObservationNum))
coordinates(p) <- ~ X + Y
experimental_variogram <- variogram(data~1, p, width=1, cutoff=cutoff)
model.variog <- vgm(model=model, range=3.9, nugget=3.4)
fit.variog <- fit.variogram(experimental_variogram, model.variog)
if (file) {
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted <- data.frame(dist = seq(0.01, max(experimental_variogram$dist), length = kObservationNum))
#convert the dataframes to a long format
Fitted$gamma <- variogramLine(fit.variog, dist_vector = Fitted$dist)$gamma
Modeled <- melt(Fitted, id.vars = "dist", measure.vars = c("gamma"))
Empirical <- melt(experimental_variogram, id.vars = "dist", measure.vars = c("gamma"))
plot.modeled <- ggplot(Empirical, aes(x = dist, y = value)) +  geom_point() +
breaks=seq(0, 1.04 * max(experimental_variogram$gamma), 1),
geom_line(data = Modeled, color='blue') +
scale_y_continuous(expand=c(0,0),
limits=c(min(0, 1.04 * min(experimental_variogram$gamma)), 1.04 * max(experimental_variogram$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimental_variogram$dist), 1),
limits=c(0, 1.04 * max(experimental_variogram$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file=file_modeled, width=7, height=4)
}
CompareClassicalModels <- function(manual, classical, filename) {
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted1 <- data.frame(dist = seq(.01, max(manual$exp_var$dist), length = kObservationNum))
Fitted1$gamma <- variogramLine(manual$var_model, dist_vector = Fitted1$dist)$gamma
#convert the dataframes to a long format
Empirical1 <- melt(manual$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled1 <- melt(Fitted1, id.vars = "dist", measure.vars = c("gamma"))
Fitted2 <- data.frame(dist = seq(.01, max(classical$exp_var$dist), length = kObservationNum))
Fitted2$gamma <- variogramLine(classical$var_model, dist_vector = Fitted2$dist)$gamma
#convert the dataframes to a long format
Empirical2 <- melt(classical$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled2 <- melt(Fitted2, id.vars = "dist", measure.vars = c("gamma"))
plot.modeled <- ggplot(Empirical1, aes(x = dist, y = value)) +  geom_point() +
geom_line(data = Modeled1, linetype="dashed") +
geom_line(data = Modeled2) +
labs(color="") +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(manual$exp_var$gamma), 1),
limits=c(min(0, 1.04 * min(manual$exp_var$gamma)), 1.04 * max(manual$exp_var$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(manual$exp_var$dist), 1),
limits=c(0, 1.04 * max(manual$exp_var$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file=filename, width=7, height=4)
plot.modeled
}
### This comparison is worth than above one, the estimation of it's goodness is simpler // TODO: check, maybe it should be removed.
### I don't see the difference and profit of this kind of comparison. Maybe it should be changed to more universal way (e.g. to pass estimation function).
### Update. Now I feel the difference. Above case is better but may be both have rights to live together, will see.
### Update of update. Hmm, this one compares only variogram calculations. The estimate based on sserr divided by length.
CompareVariogramParameters <- function (data, x, y=rep(1, kObservationNum), width) {
lens <- 1:kObservationNum
classicalResult <- c()
robustResult <- c()
spdata <- data.frame(cbind("x"=x, "y"=y, data))
coordinates(spdata) = ~x+y
i <- 1
for(l in lens) {
variogram.classical = autofitVariogram(data~1, spdata, cutoff=l, cressie=FALSE, width=width)
variogram.robust = autofitVariogram(data~1, spdata, cutoff=l, cressie=TRUE, width=width)
classicalResult[i] <- variogram.classical$sserr / l
robustResult[i] <- variogram.robust$sserr / l
i = i + 1
}
ggplot() +
geom_line(data=data.frame("X"=lens, "Y"=classicalResult), aes(x=X, y=Y, color="classic")) +
geom_line(data=data.frame("X"=lens, "Y"=robustResult), aes(x=X, y=Y, color="cressie")) +
scale_x_continuous(breaks=lens) +
scale_y_continuous(breaks=seq(1.04 * min(classicalResult, robustResult), 1.04 * max(classicalResult, robustResult), 1))
}
ComputeManualVariogram <- function (data, cutoff, model="Sph", file=FALSE, file_modeled="") {
# Make fake second coordinate
p <- data.frame("X"=c(1:kObservationNum), "Y"=rep(1, kObservationNum))
coordinates(p) <- ~ X + Y
experimental_variogram <- variogram(data~1, p, width=1, cutoff=cutoff)
model.variog <- vgm(model=model, range=3.9, nugget=3.4)
fit.variog <- fit.variogram(experimental_variogram, model.variog)
if (file) {
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted <- data.frame(dist = seq(0.01, max(experimental_variogram$dist), length = kObservationNum))
Fitted$gamma <- variogramLine(fit.variog, dist_vector = Fitted$dist)$gamma
#convert the dataframes to a long format
Empirical <- melt(experimental_variogram, id.vars = "dist", measure.vars = c("gamma"))
Modeled <- melt(Fitted, id.vars = "dist", measure.vars = c("gamma"))
plot.modeled <- ggplot(Empirical, aes(x = dist, y = value)) +  geom_point() +
geom_line(data = Modeled, color='blue') +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimental_variogram$gamma), 1),
limits=c(min(0, 1.04 * min(experimental_variogram$gamma)), 1.04 * max(experimental_variogram$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimental_variogram$dist), 1),
limits=c(0, 1.04 * max(experimental_variogram$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file=file_modeled, width=7, height=4)
}
print(xtable(data.frame("Модель"=fit.variog$model, "Порог"=fit.variog$psill, "Ранг"=fit.variog$range), caption="Модель вариограммы", label="table:manual_model"), table.placement="H",
file="out/variogram/manual-model.tex")
result = list(exp_var = experimental_variogram, var_model = fit.variog)
}
## Calculates modeled variogram and creates plot of it.
ComputeVariogram <- function (data, x, y=rep(1, kObservationNum), file_empirical="", file_modeled="", cressie, cutoff, width) {
spdata <- data.frame(cbind("x"=x, "y"=y, data))
coordinates(spdata) = ~x+y
variogram <- autofitVariogram(data~1, spdata, cutoff=cutoff, cressie=cressie, width=width)
if (nchar(file_empirical)) { ## here was another check: just <file>
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted <- data.frame(dist = seq(.01, max(variogram$exp_var$dist), length = kObservationNum))
Fitted$gamma <- variogramLine(variogram$var_model, dist_vector = Fitted$dist)$gamma
#convert the dataframes to a long format
Empirical <- melt(variogram$exp_var, id.vars="dist", measure.vars=c("gamma"))
Modeled <- melt(Fitted, id.vars="dist", measure.vars=c("gamma"))
plot.empirical <- ggplot(Empirical, aes(x=dist, y=value)) +  geom_point() +
scale_y_continuous(expand = c(0, 0), breaks=seq(0, 7, 1), limits=c(min(0, 1.04 * min(variogram$exp_var$gamma)), 1.04 * max(variogram$exp_var$gamma))) +
scale_x_continuous(expand = c(0, 0), breaks=seq(0, 1.04 * max(variogram$exp_var$dist), 2), limits=c(0, 1.04 * max(variogram$exp_var$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.empirical, file=file_empirical, width=7, height=4)
}
if (nchar(file_modeled)) {
plot.modeled <- ggplot(Empirical, aes(x=dist, y=value)) +  geom_point() +
geom_line(data=Modeled, color='blue') +
scale_y_continuous(expand=c(0, 0),
breaks=seq(0, 1.04 * max(variogram$exp_var$gamma), 1),
limits=c(min(0, 1.04 * min(variogram$exp_var$gamma)), 1.04 * max(variogram$exp_var$gamma))) +
scale_x_continuous(expand=c(0, 0),
breaks=seq(0, 1.04 * max(variogram$exp_var$dist), 1),
limits=c(0, 1.04 * max(variogram$exp_var$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file=file_modeled, width=7, height=4)
}
variogram
}
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, file=TRUE, file_modeled="figures/variogram/manual-model.png")
ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", file=TRUE, file_modeled="figures/variogram/manual-model.png")
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, file=TRUE, file_modeled="figures/variogram/manual-model.png")
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, file=TRUE, file_modeled="figures/variogram/manual-linear-model.png")
ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", file=TRUE, file_modeled="figures/variogram/manual-linear-model.png")
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", file=TRUE, file_modeled="figures/variogram/manual-linear-model.png")
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
res.manual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual,    "figures/variogram/cross-prediction-manual.png")
mse.manual    <- MSE(res.manual)
source('~/study/bachelors-thesis/R/lib/variogram.R', echo=TRUE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", file=TRUE, file_modeled="figures/variogram/manual-linear-model.png")
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", file_modeled="figures/variogram/manual-linear-model.png")
source('~/.active-rstudio-document', echo=TRUE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", file_modeled="figures/variogram/manual-linear-model.png")
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, file_modeled="figures/variogram/manual-linear-model.png")
source('~/study/bachelors-thesis/R/lib/variogram.R', echo=TRUE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, file_modeled="figures/variogram/manual-linear-model.png")
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
source('~/.active-rstudio-document', echo=TRUE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, psill=1, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, range=0, psill=1, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, range=0, psill=.1, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, range=0, psill=.1, file_modeled="figures/variogram/manual-linear-model.png", fit=TRUE)
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
res.manual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual,    "figures/variogram/cross-prediction-manual.png")
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, range=0, psill=2, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, range=0, psill=1, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, range=0, psill=.5, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, range=0, psill=.3, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, model="Lin", nugget=0, range=0, psill=.1, file_modeled="figures/variogram/manual-linear-model.png", fit=FALSE)
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
ComputeManualVariogram(research.data.residuals, cutoff=cutoff, file_modeled="figures/variogram/manual-model.png")
ComputeManualVariogram(research.data.residuals, cutoff=:, file_modeled="figures/variogram/manual-model.png")
ComputeManualVariogram(research.data.residuals, cutoff=5, file_modeled="figures/variogram/manual-model.png")
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
source('~/study/bachelors-thesis/R/lib/variogram.R', echo=TRUE)
source('~/study/bachelors-thesis/R/lib/variogram.R', echo=TRUE)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, file_modeled="figures/variogram/manual-model.png")
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=5, file_modeled="figures/variogram/manual-model.png")
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
kriging.manual$var1.pred
kriging.manual$var1.pred
1
