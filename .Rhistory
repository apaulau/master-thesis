path.data <- "data/batorino_july.csv" # this for future shiny support and may be choosing multiple data sources
src.nrows <- 38
src.data  <- read.csv(file=path.data, header=TRUE, sep=";", nrows=src.nrows, colClasses=c("numeric", "numeric"), stringsAsFactors=FALSE)
## Global use constants
kDateBreaks <- seq(min(src.data$year) - 5, max(src.data$year) + 5, by=2) # date points for graphs
## For the reason of prediction estimation and comparison, let cut observations number by 3
kObservationNum <- length(src.data[, 1]) - 3
WriteCharacteristic(expression=kObservationNum, type="original", name="n")
## Source data as basic time series plot: points connected with line
plot.source <- DrawDataRepresentation(data=src.data, filename="source.png", datebreaks=kDateBreaks)
print(xtable(src.data, caption="Исходные данные.", label="table:source"),  table.placement="H",
file="out/original/data.tex")
## Form the data for research
research.data <- src.data[0:kObservationNum, ]
# Getting descriptive statistics for temperature in russian locale
research.data.dstats <- dstats.describe(research.data$temperature, type="original", locale=TRUE)
print(xtable(research.data.dstats, caption="Описательные статистики для наблюдаемых температур.", label="table:dstats"),
file="out/original/dstats.tex")
# Compute Sturges rule for output
WriteCharacteristic(expression=nclass.Sturges(research.data$temperature), type="original", name="sturges")
## Basic histogram based on Sturges rule (by default) with pretty output (also by default)
plot.data.hist <- DrawHistogram(data=research.data, filename="original/histogram.png")
## Tests for normality
research.data.shapiro <- ntest.ShapiroWilk(data=research.data$temperature, type="original", name="shapiro")
research.data.pearson <- ntest.PearsonChi2(data=research.data$temperature, type="original", name="pearson")
research.data.ks      <- ntest.KolmogorovSmirnov(data=research.data$temperature, type="original", name="ks")
## Normal Quantile-Quantile plot // TODO: check when it appears in text
plot.data.qq <- DrawQuantileQuantile(data=research.data$temperature, filename="original/quantile.png")
## Scatter plot with regression line
plot.data.scatter <- DrawScatterPlot(research.data, filename="original/scatterplot.png", kDateBreaks);
## Grubbs test for outliers
research.data.grubbs <- grubbs.test(research.data$temperature)
WriteTest(research.data.grubbs$statistic, research.data.grubbs$p.value, type="original", name="grubbs")
## Compute correlation for output
research.data.correlation <- cor(x=research.data$year, y=research.data$temperature)
WriteCharacteristic(research.data.correlation, type="original", name="correlation")
## Pearson's product-moment correlation test. Use time for y as numerical
research.data.ctest <- cor.test(research.data$temperature, c(1:kObservationNum), method="pearson")
WriteTest(research.data.ctest$statistic, research.data.ctest$p.value, research.data.ctest$parameter[[1]], type="original", name="correlation")
## Fitting linear model for researching data. It also compute residuals based on subtracted regression
research.data.fit <- lm(research.data$temperature ~ c(1:kObservationNum))
linear <- function(x, a, b) a * x + b
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]), FUN=linear, a=research.data.fit$coefficients[[2]], b=research.data.fit$coefficients[[1]]))
print(xtable(research.residuals.prediction.trend, caption="Сравнение прогнозных значений", label="table:prediction_trend", digits=c(0, 0, 2, 2)),
file="out/residual/prediction-trend.tex")
## Time series (which is by default is research data) with trend line based on linear module estimate (lm)
plot.data.ts <- DrawTimeSeries(data=research.data, filename="original/time-series.png", datebreaks=kDateBreaks)
## Next step is research residuals computed few lines above
research.residuals <- data.frame("year"=research.data$year, "temperature"=research.data.fit$residuals)
print(xtable(research.residuals, caption="Временной ряд остатков.", label="table:residuals"), table.placement="H",
file="out/residual/data.tex")
## Residuals time series (data have gotten on computing step: fitting linear model)
plot.residuals.ts <- DrawTimeSeries(data=research.residuals, filename="residual/time-series.png", datebreaks=kDateBreaks)
## Descriptive statistics for residuals
research.residuals.dstats <- dstats.describe(research.residuals$temperature, type="residual", locale=TRUE)
print(xtable(research.residuals.dstats, caption="Описательные статистики остатков", label="table:residuals_dstats"),
file="out/residual/dstats.tex")
## Basic histogram for residuals / seems like the same as for non-residuals
plot.residuals.hist <- DrawHistogram(data=research.residuals, filename="residual/histogram.png")
## Tests for normality
research.data.shapiro <- ntest.ShapiroWilk(data=research.residuals$temperature, type="residual", name="shapiro")
research.data.pearson <- ntest.PearsonChi2(data=research.residuals$temperature, type="residual", name="pearson")
research.data.ks      <- ntest.KolmogorovSmirnov(data=research.residuals$temperature, type="residual", name="ks")
## Normal Quantile-Quantile plot for residuals
plot.residuals.qq <- DrawQuantileQuantile(data=research.residuals$temperature, filename="residual/quantile.png")
## Auto Correlation Function plot
plot.residuals.acf <- DrawAutoCorrelationFunction(data=research.data$temperature, filename="residual/acf.png")
## Box-Ljung and adf tests (some kind of stationarity and independence tests) // TODO: need to know exactly in theory what it is
research.residuals.box <- Box.test(research.residuals$temperature, type="Ljung-Box")
WriteTest(research.residuals.box$statistic, research.residuals.box$p.value, research.residuals.box$parameter[[1]], type="residual", name="ljung-box")
research.residuals.adf <- adf.test(research.residuals$temperature)
WriteTest(research.residuals.adf$statistic, research.residuals.adf$p.value, type="residual", name="stationarity")
debugSource('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
source('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
source('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
source('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
source('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
debugSource('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
x
print(x)
spdata
x
source('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
source('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
source('~/study/bachelors-thesis/R/predictor.R', echo=TRUE)
sapply(c(1:10), FUN=function(x)x^2)
sapply(c(1:10), FUN=function(x)x^2)
a <- sapply(c(1:10), FUN=function(x)x^2)
a
a <- c(sapply(c(1:10), FUN=function(x) x^2))
a
sapply(c(1:10), FUN=function(x)x^2)
source('~/study/bachelors-thesis/R/lib/kriging.R', echo=TRUE)
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
source('~/study/bachelors-thesis/R/lib/kriging.R', echo=TRUE)
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
source('~/study/bachelors-thesis/R/lib/kriging.R', echo=TRUE)
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
source('~/study/bachelors-thesis/R/lib/kriging.R', echo=TRUE)
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
source('~/study/bachelors-thesis/R/lib/kriging.R', echo=TRUE)
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
source('~/study/bachelors-thesis/R/lib/kriging.R', echo=TRUE)
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
source('~/study/bachelors-thesis/R/lib/kriging.R', echo=TRUE)
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
source('~/study/bachelors-thesis/R/lib/variogram.R', echo=TRUE)
source('~/study/bachelors-thesis/R/lib/kriging.R', echo=TRUE)
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
a <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
a
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variog=ComputeVariogram, cressie, cutoff, name, caption) {
variogram <- variog(data, x=ConvertYearsToNum(year), cressie=cressie, cutoff=cutoff, name=name)
WriteCharacteristic(variogram$var_model[[2]][1], type="variogram", name=paste0(name, "-nug"))
WriteCharacteristic(variogram$var_model[[2]][2], type="variogram", name=paste0(name, "-psill"))
WriteCharacteristic(variogram$var_model[[3]][2], type="variogram", name=paste0(name, "-range"))
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), variogram_model=variogram$var_model)
residual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, prediction, name)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдение"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогноз"=prediction$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram, prediction, residual, mse)
}
processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
processPrediction <- function (data, year, variog=ComputeVariogram, cressie, cutoff, name, caption) {
variogram <- variog(data, x=ConvertYearsToNum(year), cressie=cressie, cutoff=cutoff, name=name)
WriteCharacteristic(variogram$var_model[[2]][1], type="variogram", name=paste0(name, "-nug"))
WriteCharacteristic(variogram$var_model[[2]][2], type="variogram", name=paste0(name, "-psill"))
WriteCharacteristic(variogram$var_model[[3]][2], type="variogram", name=paste0(name, "-range"))
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), variogram_model=variogram$var_model)
residual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, prediction, name)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдение"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогноз"=prediction$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
manual.best    <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff$manual, name="manual-best", caption="Наилучший прогноз (сферическая модель)")
manual <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
# Compute prediction with auto fit model using classical estimation
classical <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff, name="classical", caption="Прогноз (классическая оценка)")
source('~/.active-rstudio-document', echo=TRUE)
log
log(0)
vgm()
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
classical <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff, name="classical", caption="Прогноз (классическая оценка)")
classical
source("R/lib/afv.R")
classical <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff, name="classical", caption="Прогноз (классическая оценка)")
classical
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
ifelse(T, 1, 0)
shiny::runApp('R/shiny')
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
## Function definition: need to be moved into isolated place
### Just definition of mean standard error // TODO: find out exact formula and describe each parameter
MSE <- function (e, N=1) {
sum(sapply(X=e, FUN=function(x) x**2)) / length(e)
}
# Completes trend values up to source observation number
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (src.nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variog=ComputeVariogram, cressie, cutoff, name, caption) {
variogram <- variog(data, x=ConvertYearsToNum(year), cressie=cressie, cutoff=cutoff, name=name)
WriteCharacteristic(variogram$var_model[[2]][1], type="variogram", name=paste0(name, "-nug"))
WriteCharacteristic(variogram$var_model[[2]][2], type="variogram", name=paste0(name, "-psill"))
WriteCharacteristic(variogram$var_model[[3]][2], type="variogram", name=paste0(name, "-range"))
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), variogram_model=variogram$var_model)
residual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, prediction, name)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдение"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогноз"=prediction$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
kObservationNum <- 32
## Form the data for research again
research.data <- src.data[0:kObservationNum, ]
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.residuals <- research.data.fit$residuals
research.data.trend <- computeTrend(research.data.fit)
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
# Draw H-Scatterplot
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], cutoff)
# Compute prediction manually with choosed model ("best" what i found)
manual <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
# Compute prediction with auto fit model using classical estimation
classical <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff, name="classical", caption="Прогноз (классическая оценка)")
# Compute prediction with auto fit model using robust (cressie) estimation
robust <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=TRUE, cutoff=cutoff, name="robust", caption="Прогноз (робастная оценка)")
models.comparison <- CompareClassicalModels(manual$variogram, classical$variogram, filename="figures/variogram/models-comparison.png")
# Find best cutoff parameters
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
manual.best    <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff$manual, name="manual-best", caption="Наилучший прогноз (сферическая модель)")
classcial.best <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff$classical, name="classical-best", caption="Наилучший прогноз (классическая оценка)")
robust.best    <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=TRUE, cutoff=cutoff$robust, name="robust-best", caption="Наилучший прогноз (робастная оценка)")
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
## Function definition: need to be moved into isolated place
### Just definition of mean standard error // TODO: find out exact formula and describe each parameter
MSE <- function (e, N=1) {
sum(sapply(X=e, FUN=function(x) x**2)) / length(e)
}
# Completes trend values up to source observation number
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (src.nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variog=ComputeVariogram, cressie, cutoff, name, caption) {
variogram <- variog(data, x=ConvertYearsToNum(year), cressie=cressie, cutoff=cutoff, name=name)
WriteCharacteristic(variogram$var_model[[2]][1], type="variogram", name=paste0(name, "-nug"))
WriteCharacteristic(variogram$var_model[[2]][2], type="variogram", name=paste0(name, "-psill"))
WriteCharacteristic(variogram$var_model[[3]][2], type="variogram", name=paste0(name, "-range"))
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), variogram_model=variogram$var_model)
residual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, prediction, name)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдение"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогноз"=prediction$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
kObservationNum <- 32
## Form the data for research again
research.data <- src.data[0:kObservationNum, ]
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.residuals <- research.data.fit$residuals
research.data.trend <- computeTrend(research.data.fit)
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
# Draw H-Scatterplot
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], cutoff)
# Compute prediction manually with choosed model ("best" what i found)
manual <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
# Compute prediction with auto fit model using classical estimation
classical <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff, name="classical", caption="Прогноз (классическая оценка)")
# Compute prediction with auto fit model using robust (cressie) estimation
robust <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=TRUE, cutoff=cutoff, name="robust", caption="Прогноз (робастная оценка)")
models.comparison <- CompareClassicalModels(manual$variogram, classical$variogram, filename="figures/variogram/models-comparison.png")
# Find best cutoff parameters
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
manual.best    <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff$manual, name="manual-best", caption="Наилучший прогноз (сферическая модель)")
classcial.best <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff$classical, name="classical-best", caption="Наилучший прогноз (классическая оценка)")
robust.best    <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=TRUE, cutoff=cutoff$robust, name="robust-best", caption="Наилучший прогноз (робастная оценка)")
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
GetPredictionYears(src.data$year, src.nrows, 0)
src.data$temperature[(35-34 - 1):src.nrows]
src.data$temperature[(35-1 - 1):src.nrows]
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
GetPredictionYears(src.data$year, src.nrows, 0, 35)
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
source('~/study/bachelors-thesis/R/lib/draw.R', echo=TRUE)
manual <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
processPrediction <- function (data, year, variog=ComputeVariogram, cressie, cutoff, name, caption) {
variogram <- variog(data, x=ConvertYearsToNum(year), cressie=cressie, cutoff=cutoff, name=name)
WriteCharacteristic(variogram$var_model[[2]][1], type="variogram", name=paste0(name, "-nug"))
WriteCharacteristic(variogram$var_model[[2]][2], type="variogram", name=paste0(name, "-psill"))
WriteCharacteristic(variogram$var_model[[3]][2], type="variogram", name=paste0(name, "-range"))
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model)
residual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, prediction, name)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдение"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогноз"=prediction$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
classical <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff, name="classical", caption="Прогноз (классическая оценка)")
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
kObservationNum
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
## Function definition: need to be moved into isolated place
### Just definition of mean standard error // TODO: find out exact formula and describe each parameter
MSE <- function (e, N=1) {
sum(sapply(X=e, FUN=function(x) x**2)) / length(e)
}
# Completes trend values up to source observation number
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (src.nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variog=ComputeVariogram, cressie, cutoff, name, caption) {
variogram <- variog(data, x=ConvertYearsToNum(year), cressie=cressie, cutoff=cutoff, name=name)
WriteCharacteristic(variogram$var_model[[2]][1], type="variogram", name=paste0(name, "-nug"))
WriteCharacteristic(variogram$var_model[[2]][2], type="variogram", name=paste0(name, "-psill"))
WriteCharacteristic(variogram$var_model[[3]][2], type="variogram", name=paste0(name, "-range"))
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model)
residual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, prediction, name)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдение"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогноз"=prediction$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
kObservationNum <- 32
## Form the data for research again
research.data <- src.data[0:kObservationNum, ]
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.residuals <- research.data.fit$residuals
research.data.trend <- computeTrend(research.data.fit)
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
# Draw H-Scatterplot
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], cutoff)
# Compute prediction manually with choosed model ("best" what i found)
manual <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
# Compute prediction with auto fit model using classical estimation
classical <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff, name="classical", caption="Прогноз (классическая оценка)")
# Compute prediction with auto fit model using robust (cressie) estimation
robust <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=TRUE, cutoff=cutoff, name="robust", caption="Прогноз (робастная оценка)")
models.comparison <- CompareClassicalModels(manual$variogram, classical$variogram, filename="figures/variogram/models-comparison.png")
# Find best cutoff parameters
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
manual.best    <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff$manual, name="manual-best", caption="Наилучший прогноз (сферическая модель)")
classcial.best <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff$classical, name="classical-best", caption="Наилучший прогноз (классическая оценка)")
robust.best    <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=TRUE, cutoff=cutoff$robust, name="robust-best", caption="Наилучший прогноз (робастная оценка)")
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
## Function definition: need to be moved into isolated place
### Just definition of mean standard error // TODO: find out exact formula and describe each parameter
MSE <- function (e, N=1) {
sum(sapply(X=e, FUN=function(x) x**2)) / length(e)
}
# Completes trend values up to source observation number
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (src.nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variog=ComputeVariogram, cressie, cutoff, name, caption) {
variogram <- variog(data, x=ConvertYearsToNum(year), cressie=cressie, cutoff=cutoff, name=name)
WriteCharacteristic(variogram$var_model[[2]][1], type="variogram", name=paste0(name, "-nug"))
WriteCharacteristic(variogram$var_model[[2]][2], type="variogram", name=paste0(name, "-psill"))
WriteCharacteristic(variogram$var_model[[3]][2], type="variogram", name=paste0(name, "-range"))
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model)
residual <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, prediction, name)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Наблюдение"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогноз"=prediction$var1.pred+research.data.trend[(kObservationNum + 1):src.nrows],
"Тренд"=research.data.trend[(kObservationNum + 1):src.nrows])
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
kObservationNum <- 32
## Form the data for research again
research.data <- src.data[0:kObservationNum, ]
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.residuals <- research.data.fit$residuals
research.data.trend <- computeTrend(research.data.fit)
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
# Draw H-Scatterplot
research.data.hscat <- DrawHScatterplot(research.data.residuals[1:kObservationNum], cutoff)
# Compute prediction manually with choosed model ("best" what i found)
manual <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
# Compute prediction with auto fit model using classical estimation
classical <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff, name="classical", caption="Прогноз (классическая оценка)")
# Compute prediction with auto fit model using robust (cressie) estimation
robust <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=TRUE, cutoff=cutoff, name="robust", caption="Прогноз (робастная оценка)")
models.comparison <- CompareClassicalModels(manual$variogram, classical$variogram, filename="figures/variogram/models-comparison.png")
# Find best cutoff parameters
cutoff <- ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year), filename="figures/variogram/parameter-comparison.png")
manual.best    <- processPrediction(data=research.data.residuals, year=research.data$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff$manual, name="manual-best", caption="Наилучший прогноз (сферическая модель)")
classcial.best <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=FALSE, cutoff=cutoff$classical, name="classical-best", caption="Наилучший прогноз (классическая оценка)")
robust.best    <- processPrediction(data=research.data.residuals, year=research.data$year, cressie=TRUE, cutoff=cutoff$robust, name="robust-best", caption="Наилучший прогноз (робастная оценка)")
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
shiny::runApp('R/shiny')
install.packages("manipulate")
packrat::init()
library(shiny)
library(ggplot2)  # eye-candy graphs
library(ggvis)
library(dplyr)
library(tseries)
library(sp)
library(gstat)
library(reshape2)
install.packages(c("shiny", "ggplot2", "ggvis", "dplyr", "tseries", "sp", "gstat", "reshape2"))
packrat::disable()
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
install.packages("outliers")
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
install.packages("nortest")
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
source('~/study/bachelors-thesis/R/master.R', echo=TRUE)
install.packages(c("shiny", "ggplot2", "ggvis", "dplyr", "tseries", "sp", "gstat", "reshape2"))
install.packages(c("shiny", "ggplot2", "ggvis", "dplyr", "tseries",
install.packages(c("shiny", "ggplot2", "ggvis", "dplyr", "tseries", "sp", "gstat", "reshape2"))
)
)
install.packages(c("shiny", "ggplot2", "ggvis", "dplyr", "tseries",
"sp", "gstat", "reshape2"))
install.packages(c("shiny", "ggplot2", "ggvis", "dplyr", "tseries",
"as")
)
install.packages(c("shiny", "ggplot2", "ggvis", "dplyr", "tseries", "sp", "gstat", "reshape2"))
install.packages(c("shiny", "ggplot2", "ggvis", "dplyr", "tseries",
"sp", "gstat", "reshape2"))
