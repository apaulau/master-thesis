# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted <- data.frame(dist = seq(0.01, max(experimentalVariogram$dist), length = kObservationNum))
Fitted$gamma <- variogramLine(modeledVariogram, dist_vector = Fitted$dist)$gamma
#convert the dataframes to a long format
Empirical <- melt(experimentalVariogram, id.vars = "dist", measure.vars = c("gamma"))
Modeled <- melt(Fitted, id.vars = "dist", measure.vars = c("gamma"))
plot.var <- ggplot(Empirical, aes(x = dist, y = value)) +  geom_point() +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimentalVariogram$gamma), 1),
limits=c(min(0, 1.04 * min(experimentalVariogram$gamma)), 1.04 * max(experimentalVariogram$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimentalVariogram$dist), 1),
limits=c(0, 1.04 * max(experimentalVariogram$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.var, file=paste0("figures/variogram/", name, "-variogram.png"), width=7, height=3.3)
plot.modeled <- plot.var + geom_line(data = Modeled, color='blue')
ggsave(plot=plot.modeled, file=paste0("figures/variogram/", name, "-modeled.png"), width=7, height=4)
}
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin", psill=3, range=0, nugget=0, fit=FALSE)
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
source('~/study/bachelors-thesis/R/master.R')
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
source('~/study/bachelors-thesis/R/lib/write.R')
source('~/study/bachelors-thesis/R/lib/kriging.R')
source('~/study/bachelors-thesis/R/lib/variogram.R')
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
source('~/study/bachelors-thesis/R/lib/write.R')
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
source('~/study/bachelors-thesis/R/lib/write.R')
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
model
name
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
modeledVariogram
modeledVariogram
source('~/study/bachelors-thesis/R/lib/variogram.R')
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
WriteVariogramParams <- function (model, name) {
}
source('~/study/bachelors-thesis/R/lib/write.R')
source('~/study/bachelors-thesis/R/lib/write.R')
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=21, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
lin.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit", psill=4, range=6.9, nugget=0, fit=FALSE)
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
lin.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-cv", psill=4, range=6.9, nugget=0, fit=FALSE)
lin.fit.cv.prediction <- PredictWithKriging(data, x=ConvertYearsToNum(sample$year), observations=kObservationNum, variogram_model=lin.ft.cv$var_model, nrows=nrows)
PredictWithKriging <- function (data, x, observations, variogram_model, nrows, future=0) {
y <- rep(1, observations)
src_data <- data.frame(cbind("x"=x, "y"=y, data))
coordinates(src_data) = ~x+y
new_data <- data.frame("X"=c((observations + 1):(nrows + future)), "Y"=rep(1, nrows - observations + future))
coordinates(new_data) = ~X+Y
krige(data~1, src_data, new_data, model=variogram_model, debug.level=0)
}
lin.fit.cv.prediction <- PredictWithKriging(data, x=ConvertYearsToNum(sample$year), observations=kObservationNum, variogram_model=lin.ft.cv$var_model, nrows=nrows)
ConvertYearsToNum(sample$year)
ConvertYearsToNum(sample$year)
# Converts years to numerical continuous representation <2010, 2011, 2012> -> <1, 2, 3>
ConvertYearsToNum <- function(years) {
c(1 : (max(years) - min(years) + 1))
}
# Returns years for which will be prediction calculated
GetPredictionYears <- function (years, number, future, observations) {
lastYear <- max(years)
c((lastYear - number + observations - 1) : (lastYear + future))
}
MakeFakeSpatialData <- function (x, data, observations) {
spdata <- data.frame(cbind("x"=x, "y"=rep(1, observations), data))
coordinates(spdata) = ~x+y
return(spdata)
}
lin.fit.cv.prediction <- PredictWithKriging(data, x=ConvertYearsToNum(sample$year), observations=kObservationNum, variogram_model=lin.ft.cv$var_model, nrows=nrows)
ConvertYearsToNum(sample$year)
sample$year
sample
trend
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
## Import local modules
source("R/lib/plot.R")       # useful functions for more comfortable plotting
source("R/lib/dstats.R")     # descriptive statistics module
source("R/lib/misc.R")       # some useful global-use functions
source("R/lib/draw.R")       # helpers for drawing
source("R/lib/write.R")      # helpers for writing
source("R/lib/ntest.R")      # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
lin.fit.cv.prediction <- PredictWithKriging(data, x=ConvertYearsToNum(sample$year), observations=kObservationNum, variogram_model=lin.ft.cv$var_model, nrows=nrows)
sample
ConvertYearsToNum(sample$year)
lin.fit.cv.prediction <- PredictWithKriging(data, x=ConvertYearsToNum(sample$year), observations=kObservationNum, variogram_model=lin.ft.cv$var_model, nrows=nrows)
lin.fit.cv.prediction <- PredictWithKriging(data, x=ConvertYearsToNum(sample$year), observations=kObservationNum, variogram_model=lin.ft.cv$var_model, nrows=nrows)
manual <- processPrediction(data=sample.residuals, year=sample$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
lin.fit.cv.prediction <- PredictWithKriging(data=sample.residuals, x=ConvertYearsToNum(sample$year), observations=kObservationNum, variogram_model=lin.ft.cv$var_model, nrows=nrows)
lin.fit.cv.prediction <- PredictWithKriging(data=sample.residuals, x=ConvertYearsToNum(sample$year), observations=kObservationNum, variogram_model=lin.fit.cv$var_model, nrows=nrows)
lin.fit.cv.prediction
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз линейная модель с порогом")
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram_model=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз линейная модель с порогом")
processPrediction <- function (data, year, variogram_model, cressie, cutoff, name, caption) {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram_model=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз линейная модель с порогом")
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variogram_model, cressie, cutoff, name, caption) {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram_model=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз линейная модель с порогом")
lin.fit.cv
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variogram, cressie, cutoff, name, caption) {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз линейная модель с порогом")
processPrediction <- function (data, year, variogram, cressie, cutoff, name, caption) {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3, 3)),
file=paste0("out/variogram/", name, "-prediction.tex"))
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз линейная модель с порогом")
shiny::runApp('R/shiny')
lin.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-cv", psill=4, range=4, nugget=0, fit=FALSE)
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз линейная модель с порогом")
lin.fit.cv
lin.fit.cv.prediction
manual <- processPrediction(data=sample.residuals, year=sample$year, variog=ComputeManualVariogram, cressie=FALSE, cutoff=cutoff, name="manual", caption="Прогноз (сферическая модель)")
lin.fit.cv.prediction
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
lin.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-cv", psill=4, range=2, nugget=0, fit=FALSE)
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.adapt, cutoff=cutoff, name="lin-fit-cv", caption="Адаптивный прогноз (линейная модель с порогом)")
shiny::runApp('R/shiny')
lin.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.adapt, cutoff=cutoff, name="lin-fit-adapt", caption="Адаптивный прогноз (линейная модель с порогом)")
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз (линейная модель с порогом)")
lin.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.adapt, cutoff=cutoff, name="lin-fit-adapt", caption="Адаптивный прогноз (линейная модель с порогом)")
shiny::runApp('R/shiny')
sph.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Sph", name="sph-fit-cv", psill=4, range=6.9, nugget=0.9, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Адаптивный прогноз (сферическая модель)")
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
lin.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-cv", psill=4, range=4, nugget=0, fit=FALSE)
lin.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-adapt", psill=4, range=2, nugget=0, fit=FALSE)
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз (линейная модель с порогом)")
lin.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.adapt, cutoff=cutoff, name="lin-fit-adapt", caption="Адаптивный прогноз (линейная модель с порогом)")
sph.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Sph", name="sph-fit-adapt", psill=4, range=6.9, nugget=0.9, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Адаптивный прогноз (сферическая модель)")
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0, fit=FALSE)
per.fit.cv
per.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=per.fit.cv, cutoff=cutoff, name="sph-fit-adapt", caption="Адаптивный прогноз (сферическая модель)")
per.fit.cv.prediction
per.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=per.fit.cv, cutoff=cutoff, name="per-fit-cv", caption="Прогноз (периодическая модель)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Адаптивный прогноз (сферическая модель)")
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0, fit=FALSE)
per.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=per.fit.cv, cutoff=cutoff, name="per-fit-cv", caption="Прогноз (периодическая модель)")
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0.001, fit=FALSE)
per.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=per.fit.cv, cutoff=cutoff, name="per-fit-cv", caption="Прогноз (периодическая модель)")
shiny::runApp('R/shiny')
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0.001, fit=FALSE)
per.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=per.fit.cv, cutoff=cutoff, name="per-fit-cv", caption="Прогноз (периодическая модель)")
SaveVariogramPlot <- function (experimentalVariogram, modeledVariogram, name) {
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted <- data.frame(dist = seq(0.01, max(experimentalVariogram$dist), length = kObservationNum))
Fitted$gamma <- variogramLine(modeledVariogram, dist_vector = Fitted$dist)$gamma
#convert the dataframes to a long format
Empirical <- melt(experimentalVariogram, id.vars = "dist", measure.vars = c("gamma"))
Modeled <- melt(Fitted, id.vars = "dist", measure.vars = c("gamma"))
plot.var <- ggplot(Empirical, aes(x = dist, y = value)) +  geom_point() +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimentalVariogram$dist), 1),
limits=c(0, 1.04 * max(experimentalVariogram$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.var, file=paste0("figures/variogram/", name, "-variogram.png"), width=7, height=3.3)
plot.modeled <- plot.var + geom_line(data = Modeled, color='blue')
ggsave(plot=plot.modeled, file=paste0("figures/variogram/", name, "-modeled.png"), width=7, height=3.3)
}
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0.001, fit=FALSE)
for.robust.only <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=TRUE, cutoff=20, model="Lin", name="robust", psill=0, range=0, nugget=0, fit=FALSE)
SaveVariogramPlot <- function (experimentalVariogram, modeledVariogram, name) {
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted <- data.frame(dist = seq(0.01, max(experimentalVariogram$dist), length = kObservationNum))
Fitted$gamma <- variogramLine(modeledVariogram, dist_vector = Fitted$dist)$gamma
#convert the dataframes to a long format
Empirical <- melt(experimentalVariogram, id.vars = "dist", measure.vars = c("gamma"))
Modeled <- melt(Fitted, id.vars = "dist", measure.vars = c("gamma"))
plot.var <- ggplot(Empirical, aes(x = dist, y = value)) +  geom_point() +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimentalVariogram$gamma), 1),
limits=c(min(0, 1.04 * min(experimentalVariogram$gamma)), 1.3 * max(experimentalVariogram$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimentalVariogram$dist), 1),
limits=c(0, 1.04 * max(experimentalVariogram$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.var, file=paste0("figures/variogram/", name, "-variogram.png"), width=7, height=3.3)
plot.modeled <- plot.var + geom_line(data = Modeled, color='blue')
ggsave(plot=plot.modeled, file=paste0("figures/variogram/", name, "-modeled.png"), width=7, height=3.3)
}
for.robust.only <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=TRUE, cutoff=20, model="Lin", name="robust", psill=0, range=0, nugget=0, fit=FALSE)
SaveVariogramPlot <- function (experimentalVariogram, modeledVariogram, name) {
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted <- data.frame(dist = seq(0.01, max(experimentalVariogram$dist), length = kObservationNum))
Fitted$gamma <- variogramLine(modeledVariogram, dist_vector = Fitted$dist)$gamma
#convert the dataframes to a long format
Empirical <- melt(experimentalVariogram, id.vars = "dist", measure.vars = c("gamma"))
Modeled <- melt(Fitted, id.vars = "dist", measure.vars = c("gamma"))
plot.var <- ggplot(Empirical, aes(x = dist, y = value)) +  geom_point() +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.5 * max(experimentalVariogram$gamma), 1),
limits=c(min(0, 1.04 * min(experimentalVariogram$gamma)), 1.5 * max(experimentalVariogram$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(experimentalVariogram$dist), 1),
limits=c(0, 1.04 * max(experimentalVariogram$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.var, file=paste0("figures/variogram/", name, "-variogram.png"), width=7, height=3.3)
plot.modeled <- plot.var + geom_line(data = Modeled, color='blue')
ggsave(plot=plot.modeled, file=paste0("figures/variogram/", name, "-modeled.png"), width=7, height=3.3)
}
for.robust.only <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=TRUE, cutoff=20, model="Lin", name="robust", psill=0, range=0, nugget=0, fit=FALSE)
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
ComputeManualVariogram <- function (data, x, cressie=FALSE, cutoff, model="Sph", psill=0, range=3.9, nugget=3.4, fit=TRUE, name="", observations) {
spdata <- MakeFakeSpatialData(x=x, data=data, observations=observations)
experimentalVariogram <- variogram(data~1, spdata, width=1, cutoff=cutoff, cressie=cressie)
if (psill == 0) {
modeledVariogram <- vgm(model=model, range=range, nugget=nugget)
} else {
modeledVariogram <- vgm(model=model, psill=psill, range=range, nugget=nugget)
}
if (fit) {
modeledVariogram <- fit.variogram(experimentalVariogram, modeledVariogram, debug.level=0, fit.method = 6)
}
if (nchar(name)) {
WriteVariogramParams(modeledVariogram, name)
SaveVariogramPlot(experimentalVariogram, modeledVariogram, name)
print(xtable(data.frame("Модель"=modeledVariogram$model, "Порог"=modeledVariogram$psill, "Ранг"=modeledVariogram$range),
caption="Модель вариограммы", label="table:manual_model"), table.placement="H", file="out/variogram/manual-model.tex")
}
result = list(exp_var = experimentalVariogram, var_model = modeledVariogram, SSerr = ifelse(is.null(attr(variogram, "SSErr")), 0, NULL))
return(result)
}
for.robust.only <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=TRUE, cutoff=20, model="Lin", name="robust", psill=0, range=0, nugget=0, fit=FALSE)
auto.class <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-20", cressie=FALSE, cutoff=20)
auto.class.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class, cutoff=20, name="auto-class-20", caption="Прогноз (волновая модель)")
auto.rob <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-rob-20", cressie=TRUE, cutoff=20)
auto.rob.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.rob, cutoff=20, name="auto-rob-20", caption="Прогноз (волновая модель)")
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
auto.class <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-26", cressie=FALSE, cutoff=26)
auto.class.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class, cutoff=26, name="auto-class-26", caption="Прогноз (периодическая модель)")
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
lin.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-cv", psill=4, range=4, nugget=0, fit=FALSE)
lin.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-adapt", psill=4, range=2, nugget=0, fit=FALSE)
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз (линейная модель с порогом)")
lin.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.adapt, cutoff=cutoff, name="lin-fit-adapt", caption="Адаптивный прогноз (линейная модель с порогом)")
sph.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Sph", name="sph-fit-adapt", psill=4, range=6.9, nugget=0.9, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Адаптивный прогноз (сферическая модель)")
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0.001, fit=FALSE)
per.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=per.fit.cv, cutoff=cutoff, name="per-fit-cv", caption="Прогноз (периодическая модель)")
for.robust.only <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=TRUE, cutoff=20, model="Lin", name="robust", psill=0, range=0, nugget=0, fit=FALSE)
auto.class <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-20", cressie=FALSE, cutoff=20)
auto.class.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class, cutoff=20, name="auto-class-20", caption="Прогноз (волновая модель)")
auto.rob <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-rob-20", cressie=TRUE, cutoff=20)
auto.rob.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.rob, cutoff=20, name="auto-rob-20", caption="Прогноз (волновая модель)")
auto.class <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-26", cressie=FALSE, cutoff=26)
auto.class.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class, cutoff=26, name="auto-class-26", caption="Прогноз (периодическая модель)")
DrawCrossPrediction <- function (actual, trend, kriging, future) {
ggplot() + geom_line(data=actual, aes(x=year, y=temperature, linetype="Наблюдение")) +
geom_line(data=trend, aes(x=year, y=temperature, linetype="Тренд")) +
geom_line(data=kriging, aes(x=year, y=temperature, linetype="Прогноз")) +
scale_linetype_manual(name="Lines", values=c("Наблюдение"="solid", "Тренд"="dashed", "Прогноз"="dotdash")) +
scale_x_continuous(breaks=seq(min(actual$year), max(actual$year) + 5 + future, by=1)) + xlab("Год наблюдения") +
scale_y_continuous(breaks=seq(16, 28, .5)) + ylab("Температура, С") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
labs(color="")
}
lin.var1 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin", psill=4, range=0, nugget=0, fit=FALSE)
lin.fit <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit", psill=4, range=0, nugget=0, fit=TRUE)
lin.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-cv", psill=4, range=4, nugget=0, fit=FALSE)
lin.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Lin", name="lin-fit-adapt", psill=4, range=2, nugget=0, fit=FALSE)
lin.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.cv, cutoff=cutoff, name="lin-fit-cv", caption="Прогноз (линейная модель с порогом)")
lin.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=lin.fit.adapt, cutoff=cutoff, name="lin-fit-adapt", caption="Адаптивный прогноз (линейная модель с порогом)")
sph.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Sph", name="sph-fit-adapt", psill=4, range=6.9, nugget=0.9, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Адаптивный прогноз (сферическая модель)")
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0.001, fit=FALSE)
per.fit.cv.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=per.fit.cv, cutoff=cutoff, name="per-fit-cv", caption="Прогноз (периодическая модель)")
for.robust.only <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=TRUE, cutoff=20, model="Lin", name="robust", psill=0, range=0, nugget=0, fit=FALSE)
auto.class <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-20", cressie=FALSE, cutoff=20)
auto.class.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class, cutoff=20, name="auto-class-20", caption="Прогноз (волновая модель)")
auto.rob <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-rob-20", cressie=TRUE, cutoff=20)
auto.rob.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.rob, cutoff=20, name="auto-rob-20", caption="Прогноз (волновая модель)")
auto.class <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-26", cressie=FALSE, cutoff=26)
auto.class.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class, cutoff=26, name="auto-class-26", caption="Прогноз (периодическая модель)")
shiny::runApp('R/shiny')
DrawParameterComparison <- function(cutoffs, manual, classical, robust) {
ggplot() +
geom_line(data=data.frame("X"=cutoffs, "Y"=classical), aes(x=X, y=Y, linetype="Матерона")) +
geom_line(data=data.frame("X"=cutoffs, "Y"=robust), aes(x=X, y=Y, linetype="Кресси-Хокинса")) +
scale_linetype_manual(name="Lines", values=c("Матерона"="dashed", "Кресси-Хокинса"="dotdash")) +
scale_x_continuous(breaks=cutoffs) +
xlab("Максимальное расстояние") + ylab("MSE") +
theme(axis.text.x = element_text(angle=90, hjust=1))
}
ComparePredictionParameters <- function(data, trend, x, filename="", observations, nrows) {
cutoffs <- c(1:observations)
computePredictionResidual <- function(data, trend, cressie, x, cutoff, observations) {
variogram <- ComputeVariogram(data, x=x, cressie=cressie, cutoff=cutoff, observations=observations)
kriging <- PredictWithKriging(data, x=x, observations=observations, variogram_model=variogram$var_model, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, kriging, observations, nrows)
return(residual)
}
classicalResult <- sapply(cutoffs, FUN=function(cutoff) MSE(computePredictionResidual(data=data, trend=trend, x=x, cressie=FALSE, cutoff=cutoff, observations=observations)))
robustResult <- sapply(cutoffs, FUN=function(cutoff) MSE(computePredictionResidual(data=data, trend=trend, x=x, cressie=TRUE, cutoff=cutoff, observations=observations)))
if (nchar(filename)) {
plot.check <- DrawParameterComparison(cutoffs, classicalResult, robustResult)
ggsave(plot=plot.check, file=filename, width=7, height=3.3)
}
list(classical=which.min(classicalResult), robust=which.min(robustResult))
}
### Compares two predictions classical and robust in case of iterating through 'cutoff' param based on MSE estimation.
ComparePredictionParameters <- function(data, trend, x, filename="", observations, nrows) {
cutoffs <- c(1:observations)
computePredictionResidual <- function(data, trend, cressie, x, cutoff, observations) {
variogram <- ComputeVariogram(data, x=x, cressie=cressie, cutoff=cutoff, observations=observations)
kriging <- PredictWithKriging(data, x=x, observations=observations, variogram_model=variogram$var_model, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, kriging, observations, nrows)
return(residual)
}
classicalResult <- sapply(cutoffs, FUN=function(cutoff) MSE(computePredictionResidual(data=data, trend=trend, x=x, cressie=FALSE, cutoff=cutoff, observations=observations)))
robustResult <- sapply(cutoffs, FUN=function(cutoff) MSE(computePredictionResidual(data=data, trend=trend, x=x, cressie=TRUE, cutoff=cutoff, observations=observations)))
if (nchar(filename)) {
plot.check <- DrawParameterComparison(cutoffs, classicalResult, robustResult)
ggsave(plot=plot.check, file=filename, width=7, height=3.3)
}
list(classical=which.min(classicalResult), robust=which.min(robustResult))
}
adapt.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-mse-cutoff.png", observations=kObservationNum, nrows=nrows)
DrawParameterComparison <- function(cutoffs, classical, robust) {
ggplot() +
geom_line(data=data.frame("X"=cutoffs, "Y"=classical), aes(x=X, y=Y, linetype="Матерона")) +
geom_line(data=data.frame("X"=cutoffs, "Y"=robust), aes(x=X, y=Y, linetype="Кресси-Хокинса")) +
scale_linetype_manual(name="Lines", values=c("Матерона"="dashed", "Кресси-Хокинса"="dotdash")) +
scale_x_continuous(breaks=cutoffs) +
xlab("Максимальное расстояние") + ylab("MSE") +
theme(axis.text.x = element_text(angle=90, hjust=1))
}
adapt.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-mse-cutoff.png", observations=kObservationNum, nrows=nrows)
ComparePredictionParameters <- function(data, trend, x, filename="", observations, nrows, adapt=TRUE) {
cutoffs <- c(1:observations)
computePredictionEstimation <- function(data, trend, cressie, x, cutoff, observations) {
variogram <- ComputeVariogram(data, x=x, cressie=cressie, cutoff=cutoff, observations=observations)
if (adapt) {
kriging <- PredictWithKriging(data, x=x, observations=observations, variogram_model=variogram$var_model, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, kriging, observations, nrows)
estimation <- MSE(residual)
} else {
crv <- computeCV(data, variogram$var_model, observations, nfold=observations)
estimation <- compStat(crv)[["Корреляция"]]
}
return(residual)
}
classicalResult <- sapply(cutoffs, FUN=function(cutoff) computePredictionEstimation(data=data, trend=trend, x=x, cressie=FALSE, cutoff=cutoff, observations=observations))
robustResult <- sapply(cutoffs, FUN=function(cutoff) computePredictionEstimation(data=data, trend=trend, x=x, cressie=TRUE, cutoff=cutoff, observations=observations))
if (nchar(filename)) {
plot.check <- DrawParameterComparison(cutoffs, classicalResult, robustResult)
ggsave(plot=plot.check, file=filename, width=7, height=3.3)
}
list(classical=which.min(classicalResult), robust=which.min(robustResult))
}
ComparePredictionParameters <- function(data, trend, x, filename="", observations, nrows, adapt=TRUE) {
cutoffs <- c(1:observations)
computePredictionEstimation <- function(data, trend, cressie, x, cutoff, observations) {
variogram <- ComputeVariogram(data, x=x, cressie=cressie, cutoff=cutoff, observations=observations)
if (adapt) {
kriging <- PredictWithKriging(data, x=x, observations=observations, variogram_model=variogram$var_model, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, kriging, observations, nrows)
estimation <- MSE(residual)
} else {
crv <- computeCV(data, variogram$var_model, observations, nfold=observations)
estimation <- compStat(crv)[["Корреляция"]]
}
return(residual)
}
classicalResult <- sapply(cutoffs, FUN=function(cutoff) computePredictionEstimation(data=data, trend=trend, x=x, cressie=FALSE, cutoff=cutoff, observations=observations))
robustResult <- sapply(cutoffs, FUN=function(cutoff) computePredictionEstimation(data=data, trend=trend, x=x, cressie=TRUE, cutoff=cutoff, observations=observations))
if (nchar(filename)) {
plot.check <- DrawParameterComparison(cutoffs, classicalResult, robustResult, adapt)
ggsave(plot=plot.check, file=filename, width=7, height=3.3)
}
list(classical=which.min(classicalResult), robust=which.min(robustResult))
}
DrawParameterComparison <- function(cutoffs, classical, robust, adapt) {
ggplot() +
geom_line(data=data.frame("X"=cutoffs, "Y"=classical), aes(x=X, y=Y, linetype="Матерона")) +
geom_line(data=data.frame("X"=cutoffs, "Y"=robust), aes(x=X, y=Y, linetype="Кресси-Хокинса")) +
scale_linetype_manual(name="Lines", values=c("Матерона"="dashed", "Кресси-Хокинса"="dotdash")) +
scale_x_continuous(breaks=cutoffs) +
xlab("Максимальное расстояние") + ylab(ifelse(adapt, "MSE", "Корреляция")) +
theme(axis.text.x = element_text(angle=90, hjust=1))
}
adapt.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-mse-cutoff.png", observations=kObservationNum, nrows=nrows)
adapt.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-mse-cutoff.png", observations=kObservationNum, nrows=nrows)
debugSource('~/study/bachelors-thesis/R/lib/kriging.R')
adapt.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-mse-cutoff.png", observations=kObservationNum, nrows=nrows)
cutoffs
classicalResult
debugSource('~/study/bachelors-thesis/R/lib/kriging.R')
adapt.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-mse-cutoff.png", observations=kObservationNum, nrows=nrows)
kriging
src$temperature
trend
residual
MSE(residual)
debugSource('~/study/bachelors-thesis/R/lib/kriging.R')
adapt.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-mse-cutoff.png", observations=kObservationNum, nrows=nrows)
cv.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-corr-cutoff.png", observations=kObservationNum, nrows=nrows)
cv.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-corr-cutoff.png", observations=kObservationNum, nrows=nrows, adapt=FALSE)
cv.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-corr-cutoff.png", observations=kObservationNum, nrows=nrows, adapt=FALSE)
crv
compStat(crv)
source('~/study/bachelors-thesis/R/lib/kriging.R')
cv.cutoff <- ComparePredictionParameters(sample.residuals, trend, ConvertYearsToNum(sample$year), filename="figures/variogram/auto-corr-cutoff.png", observations=kObservationNum, nrows=nrows, adapt=FALSE)
shiny::runApp('R/shiny')
auto.rob.adapt <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-rob-5", cressie=TRUE, cutoff=5)
auto.rob.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.rob.adapt, cutoff=5, name="auto-rob-5", caption="Прогноз (волновая модель)")
auto.class.adapt <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-18", cressie=FALSE, cutoff=18)
auto.class.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class.adapt, cutoff=18, name="auto-class-18", caption="Прогноз (периодическая модель)")
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
trend <- sapply(X=ConvertYearsToNum(src$year[(kObservationNum + 1):nrows]), FUN=linear, a=sample.fit$coefficients[[2]], b=sample.fit$coefficients[[1]])
sample.residuals.prediction.trend <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Актуальное"=src$temperature[(kObservationNum + 1):nrows],
"Прогнозное"=trend,
"Ошибка"=src$temperature[(kObservationNum + 1):nrows] - trend)
print(xtable(sample.residuals.prediction.trend, caption="Сравнение прогнозных значений (тренда)", label="table:prediction_trend", digits=c(0, 0, 2, 2, 2)),
file="out/residual/prediction-trend.tex")
shiny::runApp('R/shiny')
