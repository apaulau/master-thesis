CrossPrediction <- function (temperature, years, trend, kriging, file_prediction="", future=0) {
prediction.trend <- data.frame("temperature"=c(temperature[(kObservationNum - 1):kObservationNum], trend[(kObservationNum + 1):src.nrows]),
"year"=GetPredictionYears(years, src.nrows, future))
prediction.kriging <- data.frame("temperature"=c(temperature[(kObservationNum - 1):kObservationNum], trend[(kObservationNum + 1):src.nrows] + kriging$var1.pred),
"year"=GetPredictionYears(years, src.nrows, future))
actual <- data.frame("temperature"=temperature[(kObservationNum - 1):src.nrows],
"year"=GetPredictionYears(years, src.nrows, 0))
if (nchar(file_prediction)) {
plot.crossprediction <- ggplot() +
geom_line(data=prediction.kriging, aes(x=year, y=temperature, color="Прогноз Кригинг", linetype="Прогноз Кригинг")) +
geom_line(data=prediction.trend, aes(x=year, y=temperature, color="Прогноз Тренд", linetype="Прогноз Тренд")) +
geom_line(data=actual, aes(x=year, y=temperature, colour="Актуальное")) +
labs(color="") +
scale_linetype_manual(name="Lines", values=c("Прогноз Кригинг"="dashed", "Прогноз Тренд"="dotdash")) +
scale_x_continuous(breaks=seq(min(actual$year), max(actual$year) + 5 + future, by=1)) + xlab("Год наблюдения") +
scale_y_continuous(breaks=seq(16, 28, .5)) + ylab("Температура, С") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
labs(color="")
ggsave(plot=plot.crossprediction, file=file_prediction, width=7, height=4)
}
prediction.kriging$temperature[3:(src.nrows-kObservationNum)] - actual$temperature[3:(src.nrows - kObservationNum)] ## what the heck? why 3?
}
res.robust.best <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust.best, "figures/variogram/cross-prediction-robust-best.png")
## Compares predictions based on trend and kriging with actual values
CrossPrediction <- function (temperature, years, trend, kriging, file_prediction="", future=0) {
prediction.trend <- data.frame("temperature"=c(temperature[(kObservationNum - 1):kObservationNum], trend[(kObservationNum + 1):src.nrows]),
"year"=GetPredictionYears(years, src.nrows, future))
prediction.kriging <- data.frame("temperature"=c(temperature[(kObservationNum - 1):kObservationNum], trend[(kObservationNum + 1):src.nrows] + kriging$var1.pred),
"year"=GetPredictionYears(years, src.nrows, future))
actual <- data.frame("temperature"=temperature[(kObservationNum - 1):src.nrows],
"year"=GetPredictionYears(years, src.nrows, 0))
if (nchar(file_prediction)) {
plot.crossprediction <- ggplot() +
geom_line(data=prediction.kriging, aes(x=year, y=temperature, linetype="Прогноз Кригинг")) +
geom_line(data=prediction.trend, aes(x=year, y=temperature, linetype="Прогноз Тренд")) +
geom_line(data=actual, aes(x=year, y=temperature, colour="Актуальное")) +
labs(color="") +
scale_linetype_manual(name="Lines", values=c("Прогноз Кригинг"="dashed", "Прогноз Тренд"="dotdash")) +
scale_x_continuous(breaks=seq(min(actual$year), max(actual$year) + 5 + future, by=1)) + xlab("Год наблюдения") +
scale_y_continuous(breaks=seq(16, 28, .5)) + ylab("Температура, С") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
labs(color="")
ggsave(plot=plot.crossprediction, file=file_prediction, width=7, height=4)
}
prediction.kriging$temperature[3:(src.nrows-kObservationNum)] - actual$temperature[3:(src.nrows - kObservationNum)] ## what the heck? why 3?
}
res.robust.best <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust.best, "figures/variogram/cross-prediction-robust-best.png")
CrossPrediction <- function (temperature, years, trend, kriging, file_prediction="", future=0) {
prediction.trend <- data.frame("temperature"=c(temperature[(kObservationNum - 1):kObservationNum], trend[(kObservationNum + 1):src.nrows]),
"year"=GetPredictionYears(years, src.nrows, future))
prediction.kriging <- data.frame("temperature"=c(temperature[(kObservationNum - 1):kObservationNum], trend[(kObservationNum + 1):src.nrows] + kriging$var1.pred),
"year"=GetPredictionYears(years, src.nrows, future))
actual <- data.frame("temperature"=temperature[(kObservationNum - 1):src.nrows],
"year"=GetPredictionYears(years, src.nrows, 0))
if (nchar(file_prediction)) {
plot.crossprediction <- ggplot() +
geom_line(data=prediction.kriging, aes(x=year, y=temperature, linetype="Прогноз Кригинг")) +
geom_line(data=prediction.trend, aes(x=year, y=temperature, linetype="Прогноз Тренд")) +
geom_line(data=actual, aes(x=year, y=temperature, linetype="Актуальное")) +
labs(color="") +
scale_linetype_manual(name="Lines", values=c("Прогноз Кригинг"="dashed", "Прогноз Тренд"="dotdash", "Актуальное"="solid")) +
scale_x_continuous(breaks=seq(min(actual$year), max(actual$year) + 5 + future, by=1)) + xlab("Год наблюдения") +
scale_y_continuous(breaks=seq(16, 28, .5)) + ylab("Температура, С") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
labs(color="")
ggsave(plot=plot.crossprediction, file=file_prediction, width=7, height=4)
}
prediction.kriging$temperature[3:(src.nrows-kObservationNum)] - actual$temperature[3:(src.nrows - kObservationNum)] ## what the heck? why 3?
}
res.robust.best <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust.best, "figures/variogram/cross-prediction-robust-best.png")
qt(0.05, 35)
qt(0.95, 35)
qt(0.05, №)
qt(0.05, 1)
qt(0.95, 1)
y_ <- 1
n
c(1,2,3)[2]
qt(0.05, df=1,lower.tail = F)
qt(0.05, df=1,lower.tail = T)
qt(0.05, df=1,lower.tail = F)
qf(1-0.05, 1, 35)
regression <- function(x, a, b) a * x + b
FisherCriticalPoint <- function(alpha, df1, df2) {
qf(1 - alpha, df1, df2)
}
reqr.adequacy <- function(y, alpha=.05) {
regression <- function(x, a, b) a * x + b
FisherTest <- function() {
CriticalPoint <- function(alpha, df1, df2) {
qf(1 - alpha, df1, df2)
}
MakeConclusion <- function(statistic, critical) {
if (statistic > critical) {
conclusion <- "нулевая гипотеза о равенстве дисперсий отвергается, что означает в рассматриваемом случае адекватность регрессионной модели"
} else {
conclusion <- "нельзя отвергнуть нулевую гипотезу о равенстве дисперсий"
}
conclusion
}
resvar <- 1 / n * sum(sapply(x, FUN=function(j){(y[j] - y_[j])^2}))
statistic <- (n - 2) * var_ / resvar
critical <- CriticalPoint(alpha, 1, n - 2)
list <- (statistic=statistic, critical=critical resvar=resvar, conclusion=MakeConclusion(statistic, critical))
}
n <- length(y)
x <- seq(1, n)
fit <- lm(y ~ x)
a <- fit$coefficients[[2]]
b <- fit$coefficients[[1]]
y_ <- sapply(X=x, FUN=regression, a=a, b=b)
var_ <- 1 / n * sum(sapply(x, FUN=function(j){(y_[j] - mean(y))^2}))
determination <- var_ / var(y)
linearity <- determination - cor(y, x)^2
list(modvar=var_, determination=determination, linearity=linearity, Fisher=FisherTest())
}
reqr.adequacy <- function(y, alpha=.05) {
regression <- function(x, a, b) a * x + b
n <- length(y)
x <- seq(1, n)
fit <- lm(y ~ x)
a <- fit$coefficients[[2]]
b <- fit$coefficients[[1]]
y_ <- sapply(X=x, FUN=regression, a=a, b=b)
var_ <- 1 / n * sum(sapply(x, FUN=function(j){(y_[j] - mean(y))^2}))
determination <- var_ / var(y)
linearity <- determination - cor(y, x)^2
FisherTest <- function() {
CriticalPoint <- function(alpha, df1, df2) {
qf(1 - alpha, df1, df2)
}
MakeConclusion <- function(statistic, critical) {
if (statistic > critical) {
conclusion <- "нулевая гипотеза о равенстве дисперсий отвергается, что означает в рассматриваемом случае адекватность регрессионной модели"
} else {
conclusion <- "нельзя отвергнуть нулевую гипотезу о равенстве дисперсий"
}
conclusion
}
resvar <- 1 / n * sum(sapply(x, FUN=function(j){(y[j] - y_[j])^2}))
statistic <- (n - 2) * var_ / resvar
critical <- CriticalPoint(alpha, 1, n - 2)
list <- (statistic=statistic, critical=critical resvar=resvar, conclusion=MakeConclusion(statistic, critical))
}
list(modvar=var_, determination=determination, linearity=linearity, Fisher=FisherTest())
}
reqr.adequacy <- function(y, alpha=.05) {
regression <- function(x, a, b) a * x + b
CriticalPoint <- function(alpha, df1, df2) {
qf(1 - alpha, df1, df2)
}
MakeConclusion <- function(statistic, critical) {
if (statistic > critical) {
conclusion <- "нулевая гипотеза о равенстве дисперсий отвергается, что означает в рассматриваемом случае адекватность регрессионной модели"
} else {
conclusion <- "нельзя отвергнуть нулевую гипотезу о равенстве дисперсий"
}
conclusion
}
n <- length(y)
x <- seq(1, n)
fit <- lm(y ~ x)
a <- fit$coefficients[[2]]
b <- fit$coefficients[[1]]
y_ <- sapply(X=x, FUN=regression, a=a, b=b)
var_ <- 1 / n * sum(sapply(x, FUN=function(j){(y_[j] - mean(y))^2}))
determination <- var_ / var(y)
linearity <- determination - cor(y, x)^2
resvar <- 1 / n * sum(sapply(x, FUN=function(j){(y[j] - y_[j])^2}))
statistic <- (n - 2) * var_ / resvar
critical <- CriticalPoint(alpha, 1, n - 2)
list(modvar=var_, determination=determination, linearity=linearity,
Fisher=list(statistic=statistic, critical=critical resvar=resvar, conclusion=MakeConclusion(statistic, critical))
}
reqr.adequacy <- function(y, alpha=.05) {
regression <- function(x, a, b) a * x + b
CriticalPoint <- function(alpha, df1, df2) {
qf(1 - alpha, df1, df2)
}
MakeConclusion <- function(statistic, critical) {
if (statistic > critical) {
conclusion <- "нулевая гипотеза о равенстве дисперсий отвергается, что означает в рассматриваемом случае адекватность регрессионной модели"
} else {
conclusion <- "нельзя отвергнуть нулевую гипотезу о равенстве дисперсий"
}
conclusion
}
n <- length(y)
x <- seq(1, n)
fit <- lm(y ~ x)
a <- fit$coefficients[[2]]
b <- fit$coefficients[[1]]
y_ <- sapply(X=x, FUN=regression, a=a, b=b)
var_ <- 1 / n * sum(sapply(x, FUN=function(j){(y_[j] - mean(y))^2}))
determination <- var_ / var(y)
linearity <- determination - cor(y, x)^2
resvar <- 1 / n * sum(sapply(x, FUN=function(j){(y[j] - y_[j])^2}))
statistic <- (n - 2) * var_ / resvar
critical <- CriticalPoint(alpha, 1, n - 2)
list(modvar=1, determination=determination, linearity=linearity,
Fisher=list(statistic=statistic, critical=critical resvar=resvar, conclusion=MakeConclusion(statistic, critical))
}
regression <- function(x, a, b) a * x + b
CriticalPoint <- function(alpha, df1, df2) {
qf(1 - alpha, df1, df2)
}
MakeConclusion <- function(statistic, critical) {
if (statistic > critical) {
conclusion <- "нулевая гипотеза о равенстве дисперсий отвергается, что означает в рассматриваемом случае адекватность регрессионной модели"
} else {
conclusion <- "нельзя отвергнуть нулевую гипотезу о равенстве дисперсий"
}
conclusion
}
reqr.adequacy <- function(y, alpha=.05) {
regression <- function(x, a, b) a * x + b
CriticalPoint <- function(alpha, df1, df2) {
qf(1 - alpha, df1, df2)
}
MakeConclusion <- function(statistic, critical) {
if (statistic > critical) {
conclusion <- "нулевая гипотеза о равенстве дисперсий отвергается, что означает в рассматриваемом случае адекватность регрессионной модели"
} else {
conclusion <- "нельзя отвергнуть нулевую гипотезу о равенстве дисперсий"
}
conclusion
}
n <- length(y)
x <- seq(1, n)
fit <- lm(y ~ x)
a <- fit$coefficients[[2]]
b <- fit$coefficients[[1]]
y_ <- sapply(X=x, FUN=regression, a=a, b=b)
var_ <- 1 / n * sum(sapply(x, FUN=function(j){(y_[j] - mean(y))^2}))
determination <- var_ / var(y)
linearity <- determination - cor(y, x)^2
resvar <- 1 / n * sum(sapply(x, FUN=function(j){(y[j] - y_[j])^2}))
statistic <- (n - 2) * var_ / resvar
critical <- CriticalPoint(alpha, 1, n - 2)
list(modvar=var_, determination=determination, linearity=linearity,
Fisher=list(statistic=statistic, critical=critical resvar=resvar, conclusion=MakeConclusion(statistic, critical)))
}
reqr.adequacy <- function(y, alpha=.05) {
regression <- function(x, a, b) a * x + b
CriticalPoint <- function(alpha, df1, df2) {
qf(1 - alpha, df1, df2)
}
MakeConclusion <- function(statistic, critical) {
if (statistic > critical) {
conclusion <- "нулевая гипотеза о равенстве дисперсий отвергается, что означает в рассматриваемом случае адекватность регрессионной модели"
} else {
conclusion <- "нельзя отвергнуть нулевую гипотезу о равенстве дисперсий"
}
conclusion
}
n <- length(y)
x <- seq(1, n)
fit <- lm(y ~ x)
a <- fit$coefficients[[2]]
b <- fit$coefficients[[1]]
y_ <- sapply(X=x, FUN=regression, a=a, b=b)
var_ <- 1 / n * sum(sapply(x, FUN=function(j){(y_[j] - mean(y))^2}))
determination <- var_ / var(y)
linearity <- determination - cor(y, x)^2
resvar <- 1 / n * sum(sapply(x, FUN=function(j){(y[j] - y_[j])^2}))
statistic <- (n - 2) * var_ / resvar
critical <- CriticalPoint(alpha, 1, n - 2)
list(modvar=var_, determination=determination, linearity=linearity,
Fisher=list(statistic=statistic, critical=critical, resvar=resvar, conclusion=MakeConclusion(statistic, critical)))
}
regr.adequacy(research.data$temperature)
reqr.adequacy(research.data$temperature)
runUrl("https://github.com/ramnathv/shinySlidify/archive/gh-pages.zip")
runGist("https://github.com/ramnathv/shinySlidify/archive/gh-pages.zip")
library("shiny", lib.loc="~/study/bachelors-thesis/packrat/lib/x86_64-apple-darwin13.4.0/3.1.2")
runUrl("https://github.com/ramnathv/shinySlidify/archive/gh-pages.zip")
install.packages("googleVis")
runUrl("https://github.com/ramnathv/shinySlidify/archive/gh-pages.zip")
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
ыксювфеф
src.data
colnames(src.data) <- c("Год наблюдения", "Температура")
src.data
shiny::runApp('R/shiny')
src.data[1:38,]
colnames(src.data[1:38,]) <- c('1', '2')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
source("lib/regr.R")       # regression tests
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
* ~~__Instead of output all testing (e.g. normality) information, output only useful values.~~ And then use it to paste into tex document inline.__
* __~~Instead of output all testing (e.g. normality) information, output only useful values.~~ And then use it to paste into tex document inline.__
* ~~Instead of output all testing (e.g. normality) information, output only useful values.~~ And then use it to paste into tex document inline.
* Shiny: includeMarkdown
* Shiny: includeMarkdown
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
lm(c(1:10))
lm(c(1:10), c(10:1))
lm(c(1:10)~c(10:1))
lm(c(1:10)~c(10:1))$residuals
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
Данное приложение реализовано в рамках дипломной работы __"Анализ и прогнозирование гидрологических данных"__
Данная страница посвящена введению в приложение, для чего оно нужно и как использовать. Описанием проблемы и предложение ее решения.
Приложение реализовано в рамках дипломной работы __"Анализ и прогнозирование гидрологических данных"__ студентом 5 курса Павловым Александром.
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
install.packages(c("colorspace", "formatR", "ggplot2", "ggvis", "gstat", "highr", "jsonlite", "ks", "lattice", "manipulate", "MASS", "mime", "Rcpp", "rstudioapi", "splancs", "zoo"))
install.packages(c("codetools", "colorspace", "formatR", "ggplot2", "gstat", "highr", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime", "Rcpp", "zoo"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
- Посмотреть статьи по оценкам вариограммы для введения внутреннцей стационарности.
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
x <- krige.cv(d~1, df, variogram.manual$var_model, nmax=32, nfold=2)
library(ggvis)
library(dplyr)
library(tseries)
library(sp)
library(gstat)
library(reshape2)
x <- krige.cv(d~1, df, variogram.manual$var_model, nmax=32, nfold=2)
df <- data.frame("d"=research.data.residuals, "x"=c(1:kObservationNum), "y"=rep(1, kObservationNum))
x <- krige.cv(d~1, df, variogram.manual$var_model, nmax=32, nfold=2)
coordinates(df) <- ~x+y
x <- krige.cv(d~1, df, variogram.manual$var_model, nmax=32, nfold=2)
x
df <- data.frame("d"=c(1,2,1,2,2,2,2,1), "x"=c(1:8), "y"=rep(1, 8))
coordinates(df) <- ~x+y
x <- krige.cv(d~1, df, variogram.manual$var_model, nmax=32, nfold=2)
x
x <- krige.cv(d~1, df, variogram.manual$var_model, nmax=32, nfold=1)
shiny::runApp('R/shiny')
research.data
research.data.dstats
research.data.dstats[-c(3)]
research.data.dstats[-c(6)]
research.data.dstats[-c(8)]
research.data.dstats[-c(8)]
research.data.dstats[-c(1)]
research.data.dstats[-c(2)]
research.data.dstats[-c(2),]
research.data.dstats[-c(2,5),]
research.data.dstats[!"Дисперсия"]
research.data.dstats[!Дисперсия]
str(dstats)
str(research.data.dstats)
research.data.dstats[c(1:10)]
research.data.dstats[1:10]
research.data.dstats[c(Среднее)]
research.data.dstats[c("Среднее")]
research.data.dstats
research.data.dstats[1]
research.data.dstats[2]
research.data.dstats[,2]
research.data.dstats[,1]
research.data.dstats[1,]
research.data.dstats[1:10,]
research.data.dstats[1:10]
research.data.dstats[1:10,]
a <- research.data.dstats[1:10,]
a
a <- research.data.dstats[[1:10,]]
a <- research.data.dstats[[1:10]]
a <- research.data.dstats[[1]]
a
c(1,ifelse(TRUE, 2))
c(1,ifelse(F, 2))
c(1,ifelse(F, 2, 3))
c(1,if(T){2})
c(1,if(F){2})
shiny::runApp('R/shiny')
