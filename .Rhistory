library(gstat)    # geostatistics
library(reshape2) # will see
## Import local modules
source("R/lib/plot.R")       # useful functions for more comfortable plotting
source("R/lib/print.R")      # functions for print some data to files
source("R/lib/dstats.R")     # descriptive statistics module
source("R/lib/misc.R")       # some useful global-use functions
source("R/lib/draw.R")       # helpers for drawing
source("R/lib/write.R")      # helpers for writing
source("R/lib/ntest.R")      # tests for normality
## Read the data / pattern: year;temperature
path.data <- "data/batorino_july.csv" # this for future shiny support and may be choosing multiple data sources
src.nrows <- 38
src.data  <- read.csv(file=path.data, header=TRUE, sep=";", nrows=src.nrows, colClasses=c("numeric", "numeric"), stringsAsFactors=FALSE)
## Global use constants
kDateBreaks <- seq(min(src.data$year) - 5, max(src.data$year) + 5, by=2) # date points for graphs
## For the reason of prediction estimation and comparison, let cut observations number by 3
kObservationNum <- length(src.data[, 1]) - 3
WriteCharacteristic(expression=kObservationNum, type="original", name="n")
## Source data as basic time series plot: points connected with line
plot.source <- DrawDataRepresentation(data=src.data, filename="source.png", datebreaks=kDateBreaks)
print(xtable(src.data, caption="Исходные данные.", label="table:source"),  table.placement="H",
file="out/original/data.tex")
## Form the data for research
research.data <- src.data[0:kObservationNum, ]
# Getting descriptive statistics for temperature in russian locale
research.data.dstats <- dstats.describe(research.data$temperature, type="original", locale=TRUE)
print(xtable(research.data.dstats, caption="Описательные статистики для наблюдаемых температур.", label="table:dstats"),
file="out/original/dstats.tex")
WriteCharacteristic <- function (expression, type, name) {
file <- paste(paste("out", type, "characteristics", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteDescriptiveStatistic <- function (expression, type, name) {
file <- paste(paste("out", type, "descriptive", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteTest <- function (statistic, p.value, type, name) {
path <- paste("out", type, "test", name, sep="/")
writer(format(statistic, nsmall=2, digits=4), paste(path, "statistic.tex", sep="/"))
writer(format(p.value, nsmall=2, digits=4), paste(path, "p-value.tex", sep="/"))
}
writer <- function (expression, file) {
sink(file=file, type="output")
cat(expression)
sink()
}
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
## Import local modules
source("R/lib/plot.R")       # useful functions for more comfortable plotting
source("R/lib/print.R")      # functions for print some data to files
source("R/lib/dstats.R")     # descriptive statistics module
source("R/lib/misc.R")       # some useful global-use functions
source("R/lib/draw.R")       # helpers for drawing
source("R/lib/write.R")      # helpers for writing
source("R/lib/ntest.R")      # tests for normality
## Read the data / pattern: year;temperature
path.data <- "data/batorino_july.csv" # this for future shiny support and may be choosing multiple data sources
src.nrows <- 38
src.data  <- read.csv(file=path.data, header=TRUE, sep=";", nrows=src.nrows, colClasses=c("numeric", "numeric"), stringsAsFactors=FALSE)
## Global use constants
kDateBreaks <- seq(min(src.data$year) - 5, max(src.data$year) + 5, by=2) # date points for graphs
## For the reason of prediction estimation and comparison, let cut observations number by 3
kObservationNum <- length(src.data[, 1]) - 3
WriteCharacteristic(expression=kObservationNum, type="original", name="n")
## Source data as basic time series plot: points connected with line
plot.source <- DrawDataRepresentation(data=src.data, filename="source.png", datebreaks=kDateBreaks)
print(xtable(src.data, caption="Исходные данные.", label="table:source"),  table.placement="H",
file="out/original/data.tex")
## Form the data for research
research.data <- src.data[0:kObservationNum, ]
# Getting descriptive statistics for temperature in russian locale
research.data.dstats <- dstats.describe(research.data$temperature, type="original", locale=TRUE)
print(xtable(research.data.dstats, caption="Описательные статистики для наблюдаемых температур.", label="table:dstats"),
file="out/original/dstats.tex")
# Compute Sturges rule for output
WriteCharacteristic(expression=nclass.Sturges(research.data$temperature), type="original", name="sturges")
## Basic histogram based on Sturges rule (by default) with pretty output (also by default)
plot.data.hist <- DrawHistogram(data=research.data, filename="original/histogram.png")
## Tests for normality
research.data.shapiro <- ntest.ShapiroWilk(data=research.data$temperature, type="original", name="shapiro")
research.data.pearson <- ntest.PearsonChi2(data=research.data$temperature, type="original", name="pearson")
research.data.ks      <- ntest.KolmogorovSmirnov(data=research.data$temperature, type="original", name="ks")
research.data.grubbs <- grubbs.test(research.data$temperature)
WriteTest(research.data.grubbs$statistic, research.data.grubbs$p.value, type="original", name="grubbs")
cor(research.data)
cor(research.data$year, research.data$temperature)
cor(x=research.data$year, y=research.data$temperature)
research.data.correlation <- cor(x=research.data$year, y=research.data$temperature)
WriteCharacteristic(research.data.correlation, type="original", name="correlation")
WriteCharacteristic <- function (expression, type, name) {
file <- paste(paste("out", type, "characteristics", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteDescriptiveStatistic <- function (expression, type, name) {
file <- paste(paste("out", type, "descriptive", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteTest <- function (statistic, p.value, df=-1, type, name) {
path <- paste("out", type, "test", name, sep="/")
writer(format(statistic, nsmall=2, digits=2), paste(path, "statistic.tex", sep="/"))
writer(format(p.value, nsmall=2, digits=2), paste(path, "p-value.tex", sep="/"))
if (df != -1) {
writer(format(df, nsmall=2, digits=2), paste(path, "df.tex", sep="/"))
}
}
writer <- function (expression, file) {
sink(file=file, type="output")
cat(expression)
sink()
}
research.data.ctest <- cor.test(research.data$temperature, c(1:kObservationNum), method="pearson")
WriteTest(research.data.ctest$statistic, research.data.ctest$p.value, research.data.ctest$df, type="original", name="correlation")
WriteTest(research.data.ctest$statistic, research.data.ctest$p.value, research.data.ctest$df, type="original", name="correlation")
df <- -1
df != -1
WriteCharacteristic <- function (expression, type, name) {
file <- paste(paste("out", type, "characteristics", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteDescriptiveStatistic <- function (expression, type, name) {
file <- paste(paste("out", type, "descriptive", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteTest <- function (statistic, p.value, df=NA, type, name) {
path <- paste("out", type, "test", name, sep="/")
writer(format(statistic, nsmall=2, digits=2), paste(path, "statistic.tex", sep="/"))
writer(format(p.value, nsmall=2, digits=2), paste(path, "p-value.tex", sep="/"))
if (df) {
writer(format(df, nsmall=2, digits=2), paste(path, "df.tex", sep="/"))
}
}
writer <- function (expression, file) {
sink(file=file, type="output")
cat(expression)
sink()
}
WriteTest(research.data.ctest$statistic, research.data.ctest$p.value, research.data.ctest$df, type="original", name="correlation")
research.data.ctest <- cor.test(research.data$temperature, c(1:kObservationNum), method="pearson")
research.data$df
research.data.ctest
research.data.ctest$conf.int
research.data.ctest$parameter
research.data.ctest$parameter[[1]]
WriteTest(research.data.ctest$statistic, research.data.ctest$p.value, research.data.ctest$parameter[[1]], type="original", name="correlation")
research.data.correlation <- cor(x=research.data$year, y=research.data$temperature)
WriteCharacteristic(research.data.correlation, type="original", name="correlation")
sapply(X=ConvertYearsToNum(src.data$year[kObservationNum:src.nrows]), FUN=linear, a=coef(research.data.fit)[2], b=coef(research.data.fit)[1])
linear <- function(x, a, b) a * x + b
sapply(X=ConvertYearsToNum(src.data$year[kObservationNum:src.nrows]), FUN=linear, a=coef(research.data.fit)[2], b=coef(research.data.fit)[1])
research.data.fit <- lm(research.data$temperature ~ c(1:kObservationNum))
sapply(X=ConvertYearsToNum(src.data$year[kObservationNum:src.nrows]), FUN=linear, a=coef(research.data.fit)[2], b=coef(research.data.fit)[1])
ConvertYearsToNum(src.data$year[kObservationNum:src.nrows])
src.data$year[kObservationNum:src.nrows]
research.data.fit$coefficients[1]
coef(research.data.fit)[1]
research.data.fit$coefficients[[1]]
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное значение"=src.data$year[(kObservationNum + 1):src.nrows,
"Прогнозное значение"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]), FUN=linear, a=research.data.fit$coefficients[[2]], b=research.data.fit$coefficients[[1]]))
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное значение"=src.data$year[(kObservationNum + 1):src.nrows,
"Прогнозное значение"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]), FUN=linear, a=research.data.fit$coefficients[[2]], b=research.data.fit$coefficients[[1]])
)
linear <- function(x, a, b) a * x + b
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное значение"=src.data$year[(kObservationNum + 1):src.nrows,
"Прогнозное значение"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]),
FUN=linear,
a=research.data.fit$coefficients[[2]],
b=research.data.fit$coefficients[[1]]
)
)
ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows])
research.data.fit$coefficients[[2]]
research.data.fit$coefficients[[1]]
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное значение"=src.data$year[(kObservationNum + 1):src.nrows],
"Прогнозное значение"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]),
FUN=linear,
a=research.data.fit$coefficients[[2]],
b=research.data.fit$coefficients[[1]]
)
)
research.residuals.prediction.trend
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное значение"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное значение"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]), FUN=linear, a=research.data.fit$coefficients[[2]], b=research.data.fit$coefficients[[1]]))
research.residuals.prediction.trend
data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]), FUN=linear, a=research.data.fit$coefficients[[2]], b=research.data.fit$coefficients[[1]]))
print(xtable(research.residuals.prediction.trend, caption="Сравнение прогнозных значений", label="table:prediction_trend"),
file="out/residual/prediction-trend.tex")
linear <- function(x, a, b) a * x + b
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]), FUN=linear, a=research.data.fit$coefficients[[2]], b=research.data.fit$coefficients[[1]]))
print(xtable(research.residuals.prediction.trend, caption="Сравнение прогнозных значений", label="table:prediction_trend"),
file="out/residual/prediction-trend.tex")
src.data$year[(kObservationNum + 1):src.nrows]
research.residuals.prediction.trend <- data.frame("Год"=src.data$year[(kObservationNum + 1):src.nrows],
"Актуальное"=src.data$temperature[(kObservationNum + 1):src.nrows],
"Прогнозное"=sapply(X=ConvertYearsToNum(src.data$year[(kObservationNum + 1):src.nrows]), FUN=linear, a=research.data.fit$coefficients[[2]], b=research.data.fit$coefficients[[1]]))
print(xtable(research.residuals.prediction.trend, caption="Сравнение прогнозных значений", label="table:prediction_trend", digits=c(0, 2, 2)),
file="out/residual/prediction-trend.tex")
print(xtable(research.residuals.prediction.trend, caption="Сравнение прогнозных значений", label="table:prediction_trend", digits=c(0, 0, 2, 2)),
file="out/residual/prediction-trend.tex")
research.residuals <- data.frame("year"=research.data$year, "temperature"=research.data.fit$residuals)
print(xtable(research.residuals, caption="Временной ряд остатков.", label="table:residuals"), table.placement="H",
file="out/residual/data.tex")
research.residuals.dstats <- dstats.describe(research.residuals$temperature, type="residual", locale=TRUE)
print(xtable(research.residuals.dstats, caption="Описательные статистики остатков", label="table:residuals_dstats"),
file="out/residual/dstats.tex")
plot.residuals.hist <- DrawHistogram(data=research.residuals, filename="residual/histogram.png")
## Tests for normality
research.data.shapiro <- ntest.ShapiroWilk(data=research.residuals$temperature, type="residual", name="shapiro")
research.data.shapiro <- ntest.ShapiroWilk(data=research.residuals$temperature, type="residual", name="shapiro")
WriteCharacteristic <- function (expression, type, name) {
file <- paste(paste("out", type, "characteristics", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteDescriptiveStatistic <- function (expression, type, name) {
file <- paste(paste("out", type, "descriptive", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteTest <- function (statistic, p.value, df=NA, type, name) {
path <- paste("out", type, "test", name, sep="/")
writer(format(statistic, nsmall=2, digits=2), paste(path, "statistic.tex", sep="/"))
writer(format(p.value, nsmall=2, digits=2), paste(path, "p-value.tex", sep="/"))
if (df != NA) {
writer(format(df, nsmall=2, digits=2), paste(path, "df.tex", sep="/"))
}
}
writer <- function (expression, file) {
sink(file=file, type="output")
cat(expression)
sink()
}
research.data.shapiro <- ntest.ShapiroWilk(data=research.residuals$temperature, type="residual", name="shapiro")
WriteCharacteristic <- function (expression, type, name) {
file <- paste(paste("out", type, "characteristics", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteDescriptiveStatistic <- function (expression, type, name) {
file <- paste(paste("out", type, "descriptive", name, sep="/"), "tex", sep=".")
writer(format(expression, nsmall=2, digits=3), file)
}
WriteTest <- function (statistic, p.value, df=FALSE, type, name) {
path <- paste("out", type, "test", name, sep="/")
writer(format(statistic, nsmall=2, digits=2), paste(path, "statistic.tex", sep="/"))
writer(format(p.value, nsmall=2, digits=2), paste(path, "p-value.tex", sep="/"))
if (df) {
writer(format(df, nsmall=2, digits=2), paste(path, "df.tex", sep="/"))
}
}
writer <- function (expression, file) {
sink(file=file, type="output")
cat(expression)
sink()
}
research.data.shapiro <- ntest.ShapiroWilk(data=research.residuals$temperature, type="residual", name="shapiro")
research.data.pearson <- ntest.PearsonChi2(data=research.residuals$temperature, type="residual", name="pearson")
research.data.ks      <- ntest.KolmogorovSmirnov(data=research.residuals$temperature, type="residual", name="ks")
## Normal Quantile-Quantile plot for residuals
plot.residuals.qq <- DrawQuantileQuantile(data=research.residuals$temperature, filename="residual/quantile.png")
## Auto Correlation Function plot
plot.residuals.acf <- DrawAutoCorrelationFunction(data=research.data$temperature, filename="residual/acf.png")
## Box-Ljung and adf tests (some kind of stationarity and independence tests) // TODO: need to know exactly in theory what it is
research.residuals.box <- Box.test(research.residuals$temperature, type="Ljung-Box")
WriteTest(research.data.box$statistic, research.data.box$p.value, research.data.box$parameter[[1]], type="residual", name="ljung-box")
WriteTest(research.residuals.box$statistic, research.residuals.box$p.value, research.residuals.box$parameter[[1]], type="residual", name="ljung-box")
research.residuals.adf <- adf.test(research.residuals$temperature)
WriteTest(research.residuals.adf$statistic, research.residuals.adf$p.value, type="residual", name="stationarity")
adf.test(research.residuals$temperature)
adf.test(research.residuals$temperature)
adf.test(research.residuals$temperature)
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
## Import local modules
source("R/lib/plot.R")       # useful functions for more comfortable plotting
source("R/lib/print.R")      # functions for print some data to files
source("R/lib/dstats.R")     # descriptive statistics module
source("R/lib/misc.R")       # some useful global-use functions
source("R/lib/draw.R")       # helpers for drawing
source("R/lib/write.R")      # helpers for writing
source("R/lib/ntest.R")      # tests for normality
adf.test(research.residuals$temperature)
adf.test(src.data$temperature)
adf.test(research.residuals$temperature)
adf.test(research.residuals$temperature, k =1)
adf.test(research.residuals$temperature, k =6)
adf.test(research.residuals$temperature, k =1)
adf.test(research.residuals$temperature, k = 20)
adf.test(research.residuals$temperature, k=21)
adf.test(research.residuals$temperature, k=15)
adf.test(research.residuals$temperature, k=3)
adf.test(research.residuals$temperature, k=4)
adf.test(research.residuals$temperature, k=5)
adf.test(research.residuals$temperature, k=0)
adf.test(research.residuals$temperature[1:32])
adf.test(research.residuals$temperature[1:30])
adf.test(research.residuals$temperature[1:25])
adf.test(research.residuals$temperature[1:20])
adf.test(research.residuals$temperature[1:10])
adf.test(research.residuals$temperature[1:33])
adf.test(research.residuals$temperature[1:34])
adf.test(research.residuals$temperature[1:32])
adf.test(research.residuals$temperature[1:31])
adf.test(research.residuals$temperature[1:36])
WriteTest(research.residuals.box$statistic, research.residuals.box$p.value, research.residuals.box$parameter[[1]], type="residual", name="ljung-box")
research.residuals.adf <- adf.test(research.residuals$temperature)
WriteTest(research.residuals.adf$statistic, research.residuals.adf$p.value, type="residual", name="stationarity")
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
## Import local modules
source("R/lib/plot.R")       # useful functions for more comfortable plotting
source("R/lib/print.R")      # functions for print some data to files
source("R/lib/dstats.R")     # descriptive statistics module
source("R/lib/misc.R")       # some useful global-use functions
source("R/lib/draw.R")       # helpers for drawing
source("R/lib/write.R")      # helpers for writing
source("R/lib/ntest.R")      # tests for normality
## Read the data / pattern: year;temperature
path.data <- "data/batorino_july.csv" # this for future shiny support and may be choosing multiple data sources
src.nrows <- 38
src.data  <- read.csv(file=path.data, header=TRUE, sep=";", nrows=src.nrows, colClasses=c("numeric", "numeric"), stringsAsFactors=FALSE)
## Global use constants
kDateBreaks <- seq(min(src.data$year) - 5, max(src.data$year) + 5, by=2) # date points for graphs
## For the reason of prediction estimation and comparison, let cut observations number by 3
kObservationNum <- length(src.data[, 1]) - 3
WriteCharacteristic(expression=kObservationNum, type="original", name="n")
## Source data as basic time series plot: points connected with line
plot.source <- DrawDataRepresentation(data=src.data, filename="source.png", datebreaks=kDateBreaks)
print(xtable(src.data, caption="Исходные данные.", label="table:source"),  table.placement="H",
file="out/original/data.tex")
## Form the data for research
research.data <- src.data[0:kObservationNum, ]
# Getting descriptive statistics for temperature in russian locale
research.data.dstats <- dstats.describe(research.data$temperature, type="original", locale=TRUE)
print(xtable(research.data.dstats, caption="Описательные статистики для наблюдаемых температур.", label="table:dstats"),
file="out/original/dstats.tex")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
geom_histogram(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
plot.hist <- plot.hist + stat_function(fun=dnorm, colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
plot.data.hist <- DrawHistogram(data=research.data, filename="original/histogram.png")
library(ggplot2)  # eye-candy graphs
plot.data.hist <- DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
stat_bin(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
plot.hist <- plot.hist + stat_function(fun=dnorm, colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
stat_bin(aes(y=..density..), colour="darkgrey", fill="white", alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
plot.hist <- plot.hist + stat_function(fun=dnorm, colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram(data=research.data, filename="original/histogram.png")
data
data = research.data
grid <- with(data, seq(min(temperature), max(temperature), length = kObservationNum))
grid
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
library(ddply)
library(ddply2)
library(dplyr)
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
library(plyr)
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
normaldens
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
stat_bin(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
grid <- with(data, seq(min(year), max(year), length = kObservationNum))
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
plot.hist <- plot.hist + geom_line(data=normaldens, aes(x=predicted, y=density), colour=#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
stat_bin(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
grid <- with(data, seq(min(year), max(year), length = kObservationNum))
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
plot.hist <- plot.hist + geom_line(data=normaldens, aes(x=predicted, y=density), colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
geom_histogram(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
grid <- with(data, seq(min(year), max(year), length = kObservationNum))
normaldens <- ddply(data, "temperature", function(df) {
data.frame(
predicted = grid,
density = dnorm(grid, mean(df$temperature), sd(df$temperature))
)
})
plot.hist <- plot.hist + geom_line(data=normaldens, aes(x=predicted, y=density), colour="#D55E00")
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
DrawHistogram(data=research.data, filename="original/histogram.png")
DrawHistogram <- function (data, filename="", binwidth=1.2, fit=TRUE) {
plot.hist <- ggplot(data, aes(x=temperature), geom='blank') +
geom_histogram(aes(y=..density..), colour="darkgrey", fill="white", binwidth=binwidth, alpha=.6) +
labs(color="") + xlab("Температура, ºС") + ylab("Плотность")
if (fit) {
plot.hist <- plot.hist + stat_function(fun=dnorm, colour="#D55E00", arg=list(mean=mean(data$temperature), sd=sd(data$temperature)))
}
if (nchar(filename)) {
plot.save(plot.hist, filename=filename)
}
plot.hist
}
source('~/study/bachelors-thesis/R/lib/afv.r', echo=TRUE)
source('~/study/bachelors-thesis/R/lib/afv.r', echo=TRUE)
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
