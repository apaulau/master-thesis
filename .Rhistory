## Compute correlation for output
sample.correlation <- cor(x = sample$year, y = sample$temperature)
WriteCharacteristic(sample.correlation, type = "original", name = "correlation")
WriteTest(sample.correlation * sqrt(kObservationNum - 2)/(1 - sample.correlation^2), 0, qt(1 - 0.05, kObservationNum - 2),
type = "original", name = "student")
## Pearson's product-moment correlation test. Use time for y as numerical
sample.ctest <- cor.test(sample$temperature, c(1:kObservationNum), method = "pearson")
WriteTest(sample.ctest$statistic, sample.ctest$p.value, sample.ctest$parameter[[1]], type = "original", name = "correlation")
## Fitting linear model for researching data. It also compute residuals based on subtracted regression
sample.fit <- lm(sample$temperature ~ c(1:kObservationNum))
linear <- function(x, a, b) a * x + b
pr.trend <- sapply(X = ConvertYearsToNum(src$year[(kObservationNum + 1):nrows]), FUN = linear, a = sample.fit$coefficients[[2]],
b = sample.fit$coefficients[[1]])
sample.residuals.prediction.trend <- data.frame(Год = src$year[(kObservationNum + 1):nrows], Актуальное = src$temperature[(kObservationNum +
1):nrows], Прогнозное = pr.trend, Ошибка = src$temperature[(kObservationNum + 1):nrows] - pr.trend)
pr.mse <- MSE(src$temperature[(kObservationNum + 1):nrows] - pr.trend)
colnames(sample.residuals.prediction.trend) <- c("", "$X(t)$", "$y(t)$", "$ X(t) - y(t) $")
print(xtable(sample.residuals.prediction.trend, caption = "Сравнение прогнозных значений (модель $ y(t) $)",
label = "table:prediction_trend", digits = c(0, 0, 3, 3, 3), align = "rr|ccc"), caption.placement = "top", file = "out/residual/prediction-trend.tex",
sanitize.text.function = function(x) {
x
}, include.rownames = FALSE)
## Time series (which is by default is research data) with trend line based on linear module estimate (lm)
plot.data.ts <- DrawTimeSeries(data = sample, filename = "original/time-series.png", datebreaks = kDateBreaks)
## Next step is research residuals computed few lines above
sample.residuals <- data.frame(year = sample$year, temperature = sample.fit$residuals)
tmp <- sample.residuals
colnames(tmp) <- c("Год", "Температура, ºС")
print(xtable(tmp, caption = "Временной ряд остатков", label = "table:residuals", digits = c(0, 0, 2),
align = "r|rc|"), table.placement = "H", caption.placement = "top", file = "out/residual/data.tex", include.rownames = FALSE)
sign <- regr.significance(sample$temperature, write = TRUE)
adeq <- regr.adequacy(sample$temperature, write = TRUE)
## Residuals time series (data have gotten on computing step: fitting linear model)
plot.residuals.ts <- DrawTimeSeries(data = sample.residuals, filename = "residual/time-series.png", datebreaks = kDateBreaks)
## Descriptive statistics for residuals
sample.residuals.dstats <- dstats.describe(sample.residuals$temperature, type = "residual", locale = TRUE)
print(xtable(sample.residuals.dstats, caption = "Описательные статистики остатков", label = "table:residuals_dstats"),
caption.placement = "top", file = "out/residual/dstats.tex")
## Basic histogram for residuals / seems like the same as for non-residuals
plot.residuals.hist <- DrawHistogram(data = sample.residuals, filename = "residual/histogram.png")
## Tests for normality
sample.shapiro <- ntest.ShapiroWilk(data = sample.residuals$temperature, type = "residual", name = "shapiro")
sample.pearson <- ntest.PearsonChi2(data = sample.residuals$temperature, type = "residual", name = "pearson")
sample.ks <- ntest.KolmogorovSmirnov(data = sample.residuals$temperature, type = "residual", name = "ks")
## Normal Quantile-Quantile plot for residuals
plot.residuals.qq <- DrawQuantileQuantile(data = sample.residuals$temperature, filename = "residual/quantile.png")
DrawAutoCorrelationFunction(data = sample$temperature, filename = "residual/acf.png")
runApp('R/shiny')
runApp('R/shiny')
geom_hline(yintercept=c(-clim, clim), linetype="dashed", col="blue") +
geom_segment(mapping=aes(xend=lag, yend=0)) +
labs(color="") + xlab(xlab) + ylab(ylab)
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
shiny::runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
## Cleaning up the workspace
rm(list = ls(all.names = TRUE))
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)  # convert data to latex tables
library(outliers)  # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)  # spatial data
library(gstat)  # geostatistics
library(reshape2)  # will see
## Import local modules
source("R/getdata.R")
source("R/lib/plot.R")  # useful functions for more comfortable plotting
source("R/lib/dstats.R")  # descriptive statistics module
source("R/lib/misc.R")  # some useful global-use functions
source("R/lib/draw.R")  # helpers for drawing
source("R/lib/write.R")  # helpers for writing
source("R/lib/ntest.R")  # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
src <- read()
kDateBreaks <- seq(min(src$year) - 5, max(src$year) + 5, by = 2)  # date points for graphs
nrows <- length(src[, 1])
kObservationNum <- nrows - 6
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
tmp <- src
sample <- src[0:kObservationNum, ]
sample.fit <- lm(sample$temperature ~ c(1:kObservationNum))
pr.trend <- sapply(X = ConvertYearsToNum(src$year[(kObservationNum + 1):nrows]), FUN = linear, a = sample.fit$coefficients[[2]],
b = sample.fit$coefficients[[1]])
sample.residuals.prediction.trend <- data.frame(Год = src$year[(kObservationNum + 1):nrows], Актуальное = src$temperature[(kObservationNum +
1):nrows], Прогнозное = pr.trend, Ошибка = src$temperature[(kObservationNum + 1):nrows] - pr.trend)
pr.mse <- MSE(src$temperature[(kObservationNum + 1):nrows] - pr.trend)
sample.residuals <- data.frame(year = sample$year, temperature = sample.fit$residuals)
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
computePrediction <- function(pred, trend) {
pred$var1.pred + trend[(kObservationNum + 1):nrows]
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variogram, cressie, cutoff, name, caption, place="ht") {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
colnames(prediction.compare) <- c("", "$X(t)$", "$X^{*}(t)$", "$y(t)$", "$ X(t) - X^{*}(t) $")
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3, 3), align="rr|cccc"),
file=paste0("out/variogram/", name, "-prediction.tex"), sanitize.text.function=function(x){x}, include.rownames=FALSE, table.placement=place, caption.placement = 'top')
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
trend <- computeTrend(sample.fit)
sample.residuals <- sample.fit$residuals
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
sample.hscat <- DrawHScatterplot(sample.residuals[1:kObservationNum])
sample.hscat
vex <- ComputeVariogram(data=c(1,2,3,4,5,6,7,8), x=c(1:8), cressie=FALSE, cutoff=6, observations=8)
kex <- PredictWithKriging(c(1,2,3,4,5,6,7,8), x=c(1:8), observations=8, variogram_model = vex$var_model, nrows=8, pred=c(4))
fit = lm(src$temperature[1:32] ~ c(1:32))
res <- fit$residuals #sapply(1:32, FUN=function(i) fit$residuals[[i]])
variogram <- vgm("Lin", nugget=0.3, range=6, psill=2)
kr <- PredictWithKriging(sample.residuals, x=ConvertYearsToNum(src$year), observation=32, variogram_model = variogram$var_model, nrows=38)
sample.residuals
sph.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Sph", name="sph-fit-adapt", psill=4, range=6.9, nugget=0.9, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
prediction.kriging
kriging
DrawCrossPrediction <- function(actual, trend, kriging, future) {
ggplot() + geom_line(data = actual, aes(x = year, y = temperature, linetype = "Наблюдение")) +
geom_line(data = kriging, aes(x = year, y = temperature, linetype = "Прогноз")) +
geom_ribbon(data = data.frame(kriging, lci = kriging$temperature - 1.96*kriging$se, uci = kriging$temperature + 1.96*kriging$se), aes(ymin=lci, ymax=uci), alpha=.3) +
geom_line(data = trend, aes(x = year, y = temperature, linetype = "Тренд")) +
scale_linetype_manual(name = "Lines", values = c(Наблюдение = "solid", Прогноз = "dotdash", Тренд = "dashed"), labels = c(expression(X(t)), expression(X^{"*"} * (t)), expression(y(t)))) +
scale_x_continuous(breaks = seq(min(actual$year), max(actual$year) + 5 + future, by = 1)) + xlab("Год наблюдения") +
scale_y_continuous(breaks = seq(16, 28, 0.5)) + ylab("Температура, ºС") +
theme(legend.title = element_blank()) + labs(color = "")
}
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
debugSource('~/uni/master-thesis/R/lib/draw.R')
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
data.frame(kriging, lci = kriging$temperature - 1.96*kriging$se, uci = kriging$temperature + 1.96*kriging$se)
kriging
source('~/uni/master-thesis/R/lib/kriging.R')
source('~/uni/master-thesis/R/lib/kriging.R')
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0.001, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE,
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
source('~/uni/master-thesis/R/predictor.R')
source('~/uni/master-thesis/R/predictor.R')
sph.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Sph", name="sph-fit-adapt", psill=4, range=6.9, nugget=0.9, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
debugSource('~/uni/master-thesis/R/lib/draw.R')
kriging
debugSource('~/uni/master-thesis/R/lib/draw.R')
install.packages(c("BH", "DBI", "evaluate", "formatR", "git2r", "gstat", "highr", "Hmisc", "jsonlite", "knitr", "openssl", "psych", "quantreg", "Rcpp", "rmarkdown", "rsconnect", "zoo"))
source('~/uni/master-thesis/R/lib/draw.R')
auto.class.adapt <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-18", cressie=FALSE, cutoff=18)
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)  # convert data to latex tables
library(outliers)  # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)  # spatial data
library(gstat)  # geostatistics
library(reshape2)  # will see
## Import local modules
source("R/getdata.R")
source("R/lib/plot.R")  # useful functions for more comfortable plotting
source("R/lib/dstats.R")  # descriptive statistics module
source("R/lib/misc.R")  # some useful global-use functions
source("R/lib/draw.R")  # helpers for drawing
source("R/lib/write.R")  # helpers for writing
source("R/lib/ntest.R")  # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
auto.class.adapt <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-18", cressie=FALSE, cutoff=18)
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
# Completes trend values up to source observation number
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
computePrediction <- function(pred, trend) {
pred$var1.pred + trend[(kObservationNum + 1):nrows]
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variogram, cressie, cutoff, name, caption, place="ht") {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
colnames(prediction.compare) <- c("", "$X(t)$", "$X^{*}(t)$", "$y(t)$", "$ X(t) - X^{*}(t) $")
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3, 3), align="rr|cccc"),
file=paste0("out/variogram/", name, "-prediction.tex"), sanitize.text.function=function(x){x}, include.rownames=FALSE, table.placement=place, caption.placement = 'top')
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
auto.class.adapt <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-18", cressie=FALSE, cutoff=18)
source('~/uni/master-thesis/R/master.R')
detach("package:ggplot2", unload=TRUE)
library("gstat", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
source('~/uni/master-thesis/R/master.R')
auto.class.adapt <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-18", cressie=FALSE, cutoff=18)
source('~/uni/master-thesis/R/master.R')
source('~/uni/master-thesis/R/master.R')
shiny::runApp('R/shiny')
runApp('R/shiny')
auto.class.adapt <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-18", cressie=FALSE, cutoff=22)
auto.class.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class.adapt, cutoff=18, name="auto-class-18", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_{10}(h) $)")
auto.class.adapt <- ComputeVariogram(data=sample.residuals, x=sample$year, name="auto-class-18", cressie=FALSE, cutoff=10)
auto.class.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class.adapt, cutoff=10, name="auto-class-18", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_{10}(h) $)")
shiny::runApp('R/shiny')
detach("package:markdown", unload=TRUE)
library("markdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
melt(
data.frame(
year,
"Наблюдение" = actual,
"Тренд" = prediction.trend,
"Кригинг" = prediction.kriging,
"1" = prediction.lowerBound,
"2" = prediction.upperBound
),
id = c("year")
)
runApp('R/shiny')
runApp('R/shiny')
year
src$year
nrows
future
obs
year
obs
max(src$year)
nrows
2012 - 32 + 40 -1
2012 - 40 + 32 -1
runApp('R/shiny')
obs
year
runApp('R/shiny')
obs
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
maxr
year
actual
length(actual)
runApp('R/shiny')
year
maxr
actual
length(actual)
length(year)
melt(
data.frame(
year,
"Наблюдение" = actual,
"Тренд" = prediction.trend,
"Кригинг" = prediction.kriging,
"1" = prediction.lowerBound,
"2" = prediction.upperBound
),
id = c("year")
)
length(actual)
length(prediction.trend)
length(prediction.kriging)
c(src$temperature[(maxr - 1):maxr], trend()[(maxr + 1):(nrows + future)] + kriging()$var1.pred)
src$temperature[(maxr - 1):maxr]
trend()[(maxr + 1):(nrows + future)]
trend()[(maxr + 1):(nrows + future)] + kriging()$var1.pred
kriging()$var1.pred
runApp('R/shiny')
observations()
nrows
src_data
runApp('R/shiny')
year
kriging()$var1.pred
length(kriging()$var1.pred)
length(actual)
trend()[(maxr + 1):(nrows + future)]
length(trend()[(maxr + 1):(nrows + future)])
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
src
src[1+5,]
src[1:5,]
src[1:5,2]
src[1:5,3]
src[1:5,4]
src['temperature']
runApp('R/shiny')
runApp('R/shiny')
tmp
tmp[input$variable]
tmp$temperature <- tmp[input$variable]
tmp
runApp('R/shiny')
runApp('R/shiny')
tmp
tmp
tmp[,2]
tmp[input$variable]
shiny::runApp('R/shiny')
shiny::runApp('R/shiny')
lsp
install.packages('TSA')
library(TSA)
sample
periodogram(sample.residuals)
sample.res
sample.residuals
data(star)
star
ts(sample.residuals)
periodogram(ts(sample.residuals))
## Cleaning up the workspace
rm(list = ls(all.names = TRUE))
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)  # convert data to latex tables
library(outliers)  # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)  # spatial data
library(gstat)  # geostatistics
library(reshape2)  # will see
## Import local modules
source("R/getdata.R")
source("R/lib/plot.R")  # useful functions for more comfortable plotting
source("R/lib/dstats.R")  # descriptive statistics module
source("R/lib/misc.R")  # some useful global-use functions
source("R/lib/draw.R")  # helpers for drawing
source("R/lib/write.R")  # helpers for writing
source("R/lib/ntest.R")  # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
src <- read()
## Global use constants
kDateBreaks <- seq(min(src$year) - 5, max(src$year) + 5, by = 2)  # date points for graphs
## For the reason of prediction estimation and comparison, let cut observations number by 3
nrows <- length(src[, 1])
kObservationNum <- nrows - 6
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
## Source data as basic time series plot: points connected with line
plot.source <- DrawDataRepresentation(data = src, filename = "source.png", datebreaks = kDateBreaks)
tmp <- src
colnames(tmp) <- c("Год", "Температура, ºС", "Растворимость кислорода, мг/л", "Насыщенность, %")
print(xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2, 2, 2), align = "r|rccc|"),
table.placement = "H", caption.placement = "top", file = "out/original/data.tex", include.rownames = FALSE)
## Form the data for research
sample <- src[0:kObservationNum, ]
# Getting descriptive statistics for temperature in russian locale
sample.dstats <- dstats.describe(sample$temperature, type = "original", locale = TRUE)
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
kObservationNum <- nrows - 6
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
kObservationNum <- nrows - 6
nrows <- length(src[, 1])
src <- read()
source("R/getdata.R")
install.packages('xlsx')
install.packages('xlsx')
source("R/getdata.R")
install.packages('rJava')
source("R/getdata.R")
library(rJava)
library('rJava')
shiny::runApp('R/shiny')
auto.class20 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Wav", name="auto-class-20", psill=1.011, range=1.14, nugget=3.03, fit=FALSE)
rm(list = ls(all.names = TRUE))
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)  # convert data to latex tables
library(outliers)  # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)  # spatial data
library(gstat)  # geostatistics
library(reshape2)  # will see
## Import local modules
source("R/getdata.R")
source("R/lib/plot.R")  # useful functions for more comfortable plotting
source("R/lib/dstats.R")  # descriptive statistics module
source("R/lib/misc.R")  # some useful global-use functions
source("R/lib/draw.R")  # helpers for drawing
source("R/lib/write.R")  # helpers for writing
source("R/lib/ntest.R")  # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
## Read the data
src <- read()
kDateBreaks <- seq(min(src$year) - 5, max(src$year) + 5, by = 2)  # date points for graphs
nrows <- length(src[, 1])
kObservationNum <- nrows - 6
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
# Completes trend values up to source observation number
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
computePrediction <- function(pred, trend) {
pred$var1.pred + trend[(kObservationNum + 1):nrows]
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variogram, cressie, cutoff, name, caption, place="ht") {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
colnames(prediction.compare) <- c("", "$X(t)$", "$X^{*}(t)$", "$y(t)$", "$ X(t) - X^{*}(t) $")
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3, 3), align="rr|cccc"),
file=paste0("out/variogram/", name, "-prediction.tex"), sanitize.text.function=function(x){x}, include.rownames=FALSE, table.placement=place, caption.placement = 'top')
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
trend <- computeTrend(sample.fit)
sample.residuals <- sample.fit$residuals
sample.fit <- lm(sample$temperature ~ c(1:kObservationNum))
sample <- src[0:kObservationNum, ]
sample.fit <- lm(sample$temperature ~ c(1:kObservationNum))
# Completes trend values up to source observation number
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
computePrediction <- function(pred, trend) {
pred$var1.pred + trend[(kObservationNum + 1):nrows]
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variogram, cressie, cutoff, name, caption, place="ht") {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
colnames(prediction.compare) <- c("", "$X(t)$", "$X^{*}(t)$", "$y(t)$", "$ X(t) - X^{*}(t) $")
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3, 3), align="rr|cccc"),
file=paste0("out/variogram/", name, "-prediction.tex"), sanitize.text.function=function(x){x}, include.rownames=FALSE, table.placement=place, caption.placement = 'top')
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
trend <- computeTrend(sample.fit)
sample.residuals <- sample.fit$residuals
auto.class20 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Wav", name="auto-class-20", psill=1.011, range=1.14, nugget=3.03, fit=FALSE)
auto.class20.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class20, cutoff=20, name="auto-class-20", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_7(h) $)")
auto.class20
auto.class26 <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="auto-class-26", psill=0.5, range=2.67, nugget=3.46, fit=FALSE)
auto.class26.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class26, cutoff=26, name="auto-class-26", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_8(h) $)")
auto.rob.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=TRUE, cutoff=5, model="Wav", name="auto-rob-5", psill=1.65, range=3.59, nugget=4.11, fit=FALSE)
auto.rob.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.rob.adapt, cutoff=5, name="auto-rob-5", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_9(h) $)", place="H")
auto.class.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=18, model="Per", name="auto-class-18", psill=0.32, range=1.3, nugget=3.8, fit=FALSE)
auto.class.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=auto.class.adapt, cutoff=18, name="auto-class-18", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_{10}(h) $)")
a <- c("123123123")
a
a[[1]]
noquote(a)
\a
a
cat(a)
?cat
