src  <- read()
View(src)
filename <- 'data/ndb1955-2012.xls'
df <- read.xlsx2(filename, sheetName = 'Баторино_ред', endRow = 1300, colIndex = 1:8, colClasses = c("Date", "character", rep("numeric", 6)))
colnames(df) <- c('date', 'point', 'depth', 'transparency', 'horizont', 'temperature', 'o2solubility', 'saturation')
df$point <- trimws(df$point)
## Transform: 'Литораль, ст.1' -> 'Литораль-1'
df$point <- gsub("\\, ст\\. (\\d+)$", "\\-\\1", df$point, ignore.case = TRUE)
## Transform: 'Лит_15_исток р.Дро' -> 'Литораль-15'
df$point <- gsub("^Лит_[а-я\\. ]*(\\d+)(.*)", "Литораль-\\1", df$point)
## Liquidate leading zero
df$point <- gsub("0(\\d)", "\\1", df$point)
## Transform: 'ст.6' -> 'Станция-6'
df$point <- gsub("ст[\\.\\-](\\d+)", "Станция-\\1", df$point, ignore.case = TRUE)
## Transform: Мядель
df$point <- gsub("Мядель-1", "Мядель", df$point, ignore.case = TRUE)
df$point <- gsub("мялель", "Мядель", df$point, ignore.case = TRUE)
df$point <- gsub("мядельская лука", "Мядельская-Лука", df$point, ignore.case = TRUE)
## Transform: 'Литораль-1', 'Пелагиаль-4' -> 'Станция-1', 'Станция-4'
df$point <- gsub("^[а-яА-Я\\-]+(\\d+)$", "Станция-\\1", df$point, ignore.case = TRUE)
df$point <- as.factor(df$point)
source("R/getdata.R")
src  <- read()
src
rownames(dataset) <- 1:dim(dataset)[1]
source("R/getdata.R")
src  <- read()
src
kObservationNum <- length(src[, 1]) - 6
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
rm(list = ls(all.names = TRUE))
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
install.packages('outliers,tseries')
install.packages('outliers')
install.packages('tseries','nortest')
install.packages('tseries')
install.packages('nortest')
install.packages('sp')
install.packages('gtest')
install.packages('gstat')
install.packages('reshape2')
source("R/getdata.R")
source("R/lib/plot.R")       # useful functions for more comfortable plotting
source("R/lib/dstats.R")     # descriptive statistics module
source("R/lib/misc.R")       # some useful global-use functions
source("R/lib/draw.R")       # helpers for drawing
source("R/lib/write.R")      # helpers for writing
source("R/lib/ntest.R")      # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
src  <- read()
kObservationNum <- length(src[, 1]) - 6
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
## Source data as basic time series plot: points connected with line
plot.source <- DrawDataRepresentation(data = src, filename = "source.png", datebreaks = kDateBreaks)
source("R/lib/plot.R")       # useful functions for more comfortable plotting
plot.source <- DrawDataRepresentation(data = src, filename = "source.png")
source("R/lib/plot.R")       # useful functions for more comfortable plotting
source("R/lib/draw.R")       # helpers for drawing
plot.source <- DrawDataRepresentation(data = src, filename = "source.png")
source("R/lib/draw.R")       # helpers for drawing
plot.source <- DrawDataRepresentation(data = src, filename = "source.png")
plot.source <- DrawDataRepresentation(data = src)
source("R/lib/draw.R")       # helpers for drawing
year(src$date)
source("R/getdata.R")
src  <- read()
src
kDateBreaks <- seq(min(src$year) - 5, max(src$year) + 5, by = 2) # date points for graphs
kObservationNum <- length(src[, 1]) - 6
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
plot.source <- DrawDataRepresentation(data = src, filename = "source.png", datebreaks = kDateBreaks)
plot.source
tmp <- src
colnames(tmp) <- c("Год", "Температура, ºС", "Растворимость кислорода, мг/л", 'Насыщенность, %')
print(
xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2), align = "r|rc|"),
table.placement = "H", caption.placement = 'top', file = "out/original/data.tex", include.rownames = FALSE)
src
source("R/getdata.R")
tmp <- src
colnames(tmp) <- c("Год", "Температура, ºС", "Растворимость кислорода, мг/л", 'Насыщенность, %')
print(
xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2, 2, 2), align = "r|rc|"),
table.placement = "H", caption.placement = 'top', file = "out/original/data.tex", include.rownames = FALSE
)
print(
xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2, 2, 2), align = "r|rccc|"),
table.placement = "H", caption.placement = 'top', file = "out/original/data.tex", include.rownames = FALSE
)
colnames(tmp) <- c("Год", "Температура, ºС", "Растворимость кислорода, мг/л", 'Насыщенность, %')
print(
xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2, 2, 2), align = "r|rcccc|"),
table.placement = "H", caption.placement = 'top', file = "out/original/data.tex", include.rownames = FALSE
)
src
src  <- read()
colnames(tmp) <- c("Год", "Температура, ºС", "Растворимость кислорода, мг/л", 'Насыщенность, %')
print(
xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2, 2, 2), align = "r|rccc|"),
table.placement = "H", caption.placement = 'top', file = "out/original/data.tex", include.rownames = FALSE
)
print(
xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2, 2, 2), align = "r|rcccc|"),
table.placement = "H", caption.placement = 'top', file = "out/original/data.tex", include.rownames = FALSE
)
src
tmp <- src
colnames(tmp) <- c("Год", "Температура, ºС", "Растворимость кислорода, мг/л", 'Насыщенность, %')
print(
xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2, 2, 2), align = "r|rccc|"),
table.placement = "H", caption.placement = 'top', file = "out/original/data.tex", include.rownames = FALSE
)
## Form the data for research
sample <- src[0:kObservationNum,]
sample.dstats <- dstats.describe(sample$temperature, type = "original", locale = TRUE)
sample.dstats
dstats.describe(sample$o2solubility, type = "original", locale = TRUE)
dstats.describe(sample$saturation, type = "original", locale = TRUE)
WriteCharacteristic(expression = nclass.Sturges(sample$temperature), type = "original", name = "sturges")
plot.data.hist <- DrawHistogram(data = sample, filename = "original/histogram.png")
source("R/lib/draw.R")       # helpers for drawing
plot.data.hist <- DrawHistogram(data = sample, filename = "original/histogram.png")
plot.data.hist
plot.data.qq <- DrawQuantileQuantile(data = sample$temperature, filename = "original/quantile.png")
plot.data.qq
DrawQuantileQuantile(data = sample$o2solubility)
DrawQuantileQuantile(data = sample$saturation)
DrawScatterPlot(sample, filename = "original/scatterplot.png", kDateBreaks)
cor(x = sample$year, y = sample$temperature)
sample.fit <- lm(sample$temperature ~ c(1:kObservationNum))
linear <- function(x, a, b) a * x + b
pr.trend <-
sapply(
X = ConvertYearsToNum(src$year[(kObservationNum + 1):nrows]), FUN = linear,
a = sample.fit$coefficients[[2]], b = sample.fit$coefficients[[1]]
)
nrows <- length(src[, 1])
pr.trend <-
sapply(
X = ConvertYearsToNum(src$year[(kObservationNum + 1):nrows]), FUN = linear,
a = sample.fit$coefficients[[2]], b = sample.fit$coefficients[[1]]
)
sample.residuals.prediction.trend <-
data.frame(
"Год" = src$year[(kObservationNum + 1):nrows],
"Актуальное" = src$temperature[(kObservationNum + 1):nrows],
"Прогнозное" = pr.trend,
"Ошибка" = src$temperature[(kObservationNum + 1):nrows] - pr.trend
)
pr.mse <- MSE(src$temperature[(kObservationNum + 1):nrows] - pr.trend)
colnames(sample.residuals.prediction.trend) <- c("", "$X(t)$", "$y(t)$", "$ X(t) - y(t) $")
print(
xtable(
sample.residuals.prediction.trend, caption = "Сравнение прогнозных значений (модель $ y(t) $)",
label = "table:prediction_trend", digits = c(0, 0, 3, 3, 3), align = "rr|ccc"
),
caption.placement = 'top', file = "out/residual/prediction-trend.tex",
sanitize.text.function = function(x) {
x
}, include.rownames = FALSE
)
## Time series (which is by default is research data) with trend line based on linear module estimate (lm)
plot.data.ts <- DrawTimeSeries(data = sample, filename = "original/time-series.png", datebreaks = kDateBreaks)
plot.data.ts
addinexamples:::reformatAddin()
ggThemeAssist:::ggThemeAssistAddin()
rm(list = ls(all.names = TRUE))
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)  # convert data to latex tables
library(outliers)  # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)  # spatial data
library(gstat)  # geostatistics
library(reshape2)  # will see
## Import local modules
source("R/getdata.R")
source("R/lib/plot.R")  # useful functions for more comfortable plotting
source("R/lib/dstats.R")  # descriptive statistics module
source("R/lib/misc.R")  # some useful global-use functions
source("R/lib/draw.R")  # helpers for drawing
source("R/lib/write.R")  # helpers for writing
source("R/lib/ntest.R")  # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
src <- read()
kDateBreaks <- seq(min(src$year) - 5, max(src$year) + 5, by = 2)  # date points for graphs
## For the reason of prediction estimation and comparison, let cut observations number by 3
nrows <- length(src[, 1])
kObservationNum <- nrows - 6
ggplot(src, aes(x = year, y = temperature)) + geom_point() + geom_line() + scale_x_continuous(breaks = kDatebreaks) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab("Год наблюдения") + ylab("Температура, ºС")
ggplot(src, aes(x = year, y = temperature)) + geom_point() + geom_line() + scale_x_continuous(breaks = kDateBreaks) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab("Год наблюдения") + ylab("Температура, ºС")
ggThemeAssist:::ggThemeAssistAddin()
runApp('R/shiny')
install.packages('ggvis')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
source("lib/getdata.R")
runApp('R/shiny')
runApp('R/shiny')
src  <- read()
source("lib/getdata.R")
src  <- read()
src  <- read()
src
length(src[, 1])
addinexamples:::reformatAddin()
src[minRange():maxRange(), ]
src[1:10,]
runApp('R/shiny')
runApp('R/shiny')
addinexamples:::reformatAddin()
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
install.packages('shinydashboard')
library(shinydashboard)
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
?validColors
install.packages("dygraphs")
library(dygraphs)
dygraph(src)
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
DrawAutoCorrelationFunction(data = sample$temperature, filename = "residual/acf.png")
## Cleaning up the workspace
rm(list = ls(all.names = TRUE))
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)  # convert data to latex tables
library(outliers)  # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)  # spatial data
library(gstat)  # geostatistics
library(reshape2)  # will see
## Import local modules
source("R/getdata.R")
source("R/lib/plot.R")  # useful functions for more comfortable plotting
source("R/lib/dstats.R")  # descriptive statistics module
source("R/lib/misc.R")  # some useful global-use functions
source("R/lib/draw.R")  # helpers for drawing
source("R/lib/write.R")  # helpers for writing
source("R/lib/ntest.R")  # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
src <- read()
## Global use constants
kDateBreaks <- seq(min(src$year) - 5, max(src$year) + 5, by = 2)  # date points for graphs
## For the reason of prediction estimation and comparison, let cut observations number by 3
nrows <- length(src[, 1])
kObservationNum <- nrows - 6
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
## Source data as basic time series plot: points connected with line
plot.source <- DrawDataRepresentation(data = src, filename = "source.png", datebreaks = kDateBreaks)
tmp <- src
colnames(tmp) <- c("Год", "Температура, ºС", "Растворимость кислорода, мг/л", "Насыщенность, %")
print(xtable(tmp, caption = "Исходные данные.", label = "table:source", digits = c(0, 0, 2, 2, 2), align = "r|rccc|"),
table.placement = "H", caption.placement = "top", file = "out/original/data.tex", include.rownames = FALSE)
## Form the data for research
sample <- src[0:kObservationNum, ]
# Getting descriptive statistics for temperature in russian locale
sample.dstats <- dstats.describe(sample$temperature, type = "original", locale = TRUE)
print(xtable(sample.dstats, caption = "Описательные статистики для наблюдаемых температур.",
label = "table:dstats"), caption.placement = "top", file = "out/original/dstats.tex")
# Compute Sturges rule for output
WriteCharacteristic(expression = nclass.Sturges(sample$temperature), type = "original", name = "sturges")
## Basic histogram based on Sturges rule (by default) with pretty output (also by default)
plot.data.hist <- DrawHistogram(data = sample, filename = "original/histogram.png")
## Tests for normality
sample.shapiro <- ntest.ShapiroWilk(data = sample$temperature, type = "original", name = "shapiro")
sample.pearson <- ntest.PearsonChi2(data = sample$temperature, type = "original", name = "pearson")
sample.ks <- ntest.KolmogorovSmirnov(data = sample$temperature, type = "original", name = "ks")
## Normal Quantile-Quantile plot // TODO: check when it appears in text
plot.data.qq <- DrawQuantileQuantile(data = sample$temperature, filename = "original/quantile.png")
## Scatter plot with regression line
plot.data.scatter <- DrawScatterPlot(sample, filename = "original/scatterplot.png", kDateBreaks)
## Grubbs test for outliers
sample.grubbs <- grubbs.test(sample$temperature)
WriteTest(sample.grubbs$statistic[1], sample.grubbs$p.value, type = "original", name = "grubbs")
## Compute correlation for output
sample.correlation <- cor(x = sample$year, y = sample$temperature)
WriteCharacteristic(sample.correlation, type = "original", name = "correlation")
WriteTest(sample.correlation * sqrt(kObservationNum - 2)/(1 - sample.correlation^2), 0, qt(1 - 0.05, kObservationNum - 2),
type = "original", name = "student")
## Pearson's product-moment correlation test. Use time for y as numerical
sample.ctest <- cor.test(sample$temperature, c(1:kObservationNum), method = "pearson")
WriteTest(sample.ctest$statistic, sample.ctest$p.value, sample.ctest$parameter[[1]], type = "original", name = "correlation")
## Fitting linear model for researching data. It also compute residuals based on subtracted regression
sample.fit <- lm(sample$temperature ~ c(1:kObservationNum))
linear <- function(x, a, b) a * x + b
pr.trend <- sapply(X = ConvertYearsToNum(src$year[(kObservationNum + 1):nrows]), FUN = linear, a = sample.fit$coefficients[[2]],
b = sample.fit$coefficients[[1]])
sample.residuals.prediction.trend <- data.frame(Год = src$year[(kObservationNum + 1):nrows], Актуальное = src$temperature[(kObservationNum +
1):nrows], Прогнозное = pr.trend, Ошибка = src$temperature[(kObservationNum + 1):nrows] - pr.trend)
pr.mse <- MSE(src$temperature[(kObservationNum + 1):nrows] - pr.trend)
colnames(sample.residuals.prediction.trend) <- c("", "$X(t)$", "$y(t)$", "$ X(t) - y(t) $")
print(xtable(sample.residuals.prediction.trend, caption = "Сравнение прогнозных значений (модель $ y(t) $)",
label = "table:prediction_trend", digits = c(0, 0, 3, 3, 3), align = "rr|ccc"), caption.placement = "top", file = "out/residual/prediction-trend.tex",
sanitize.text.function = function(x) {
x
}, include.rownames = FALSE)
## Time series (which is by default is research data) with trend line based on linear module estimate (lm)
plot.data.ts <- DrawTimeSeries(data = sample, filename = "original/time-series.png", datebreaks = kDateBreaks)
## Next step is research residuals computed few lines above
sample.residuals <- data.frame(year = sample$year, temperature = sample.fit$residuals)
tmp <- sample.residuals
colnames(tmp) <- c("Год", "Температура, ºС")
print(xtable(tmp, caption = "Временной ряд остатков", label = "table:residuals", digits = c(0, 0, 2),
align = "r|rc|"), table.placement = "H", caption.placement = "top", file = "out/residual/data.tex", include.rownames = FALSE)
sign <- regr.significance(sample$temperature, write = TRUE)
adeq <- regr.adequacy(sample$temperature, write = TRUE)
## Residuals time series (data have gotten on computing step: fitting linear model)
plot.residuals.ts <- DrawTimeSeries(data = sample.residuals, filename = "residual/time-series.png", datebreaks = kDateBreaks)
## Descriptive statistics for residuals
sample.residuals.dstats <- dstats.describe(sample.residuals$temperature, type = "residual", locale = TRUE)
print(xtable(sample.residuals.dstats, caption = "Описательные статистики остатков", label = "table:residuals_dstats"),
caption.placement = "top", file = "out/residual/dstats.tex")
## Basic histogram for residuals / seems like the same as for non-residuals
plot.residuals.hist <- DrawHistogram(data = sample.residuals, filename = "residual/histogram.png")
## Tests for normality
sample.shapiro <- ntest.ShapiroWilk(data = sample.residuals$temperature, type = "residual", name = "shapiro")
sample.pearson <- ntest.PearsonChi2(data = sample.residuals$temperature, type = "residual", name = "pearson")
sample.ks <- ntest.KolmogorovSmirnov(data = sample.residuals$temperature, type = "residual", name = "ks")
## Normal Quantile-Quantile plot for residuals
plot.residuals.qq <- DrawQuantileQuantile(data = sample.residuals$temperature, filename = "residual/quantile.png")
DrawAutoCorrelationFunction(data = sample$temperature, filename = "residual/acf.png")
runApp('R/shiny')
runApp('R/shiny')
geom_hline(yintercept=c(-clim, clim), linetype="dashed", col="blue") +
geom_segment(mapping=aes(xend=lag, yend=0)) +
labs(color="") + xlab(xlab) + ylab(ylab)
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
shiny::runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
runApp('R/shiny')
## Cleaning up the workspace
rm(list = ls(all.names = TRUE))
## Dependencies
library(ggplot2)  # eye-candy graphs
library(xtable)  # convert data to latex tables
library(outliers)  # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)  # spatial data
library(gstat)  # geostatistics
library(reshape2)  # will see
## Import local modules
source("R/getdata.R")
source("R/lib/plot.R")  # useful functions for more comfortable plotting
source("R/lib/dstats.R")  # descriptive statistics module
source("R/lib/misc.R")  # some useful global-use functions
source("R/lib/draw.R")  # helpers for drawing
source("R/lib/write.R")  # helpers for writing
source("R/lib/ntest.R")  # tests for normality
source("R/lib/regr.R")
source("R/lib/measures.R")
src <- read()
kDateBreaks <- seq(min(src$year) - 5, max(src$year) + 5, by = 2)  # date points for graphs
nrows <- length(src[, 1])
kObservationNum <- nrows - 6
WriteCharacteristic(expression = kObservationNum, type = "original", name = "n")
tmp <- src
sample <- src[0:kObservationNum, ]
sample.fit <- lm(sample$temperature ~ c(1:kObservationNum))
pr.trend <- sapply(X = ConvertYearsToNum(src$year[(kObservationNum + 1):nrows]), FUN = linear, a = sample.fit$coefficients[[2]],
b = sample.fit$coefficients[[1]])
sample.residuals.prediction.trend <- data.frame(Год = src$year[(kObservationNum + 1):nrows], Актуальное = src$temperature[(kObservationNum +
1):nrows], Прогнозное = pr.trend, Ошибка = src$temperature[(kObservationNum + 1):nrows] - pr.trend)
pr.mse <- MSE(src$temperature[(kObservationNum + 1):nrows] - pr.trend)
sample.residuals <- data.frame(year = sample$year, temperature = sample.fit$residuals)
source("R/lib/afv.R")
source("R/lib/variogram.R")
source("R/lib/kriging.R")
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
computePrediction <- function(pred, trend) {
pred$var1.pred + trend[(kObservationNum + 1):nrows]
}
# Computes prediction with passed parameters and saves all needed info and plots
processPrediction <- function (data, year, variogram, cressie, cutoff, name, caption, place="ht") {
prediction <- PredictWithKriging(data, x=ConvertYearsToNum(year), observations=kObservationNum, variogram_model=variogram$var_model, nrows=nrows)
CrossPrediction(src$temperature, src$year, trend, prediction, name, observations=kObservationNum, nrows=nrows)
residual <- ComputeKrigingResiduals(src$temperature, trend, prediction, observations=kObservationNum, nrows=nrows)
mse <- MSE(residual)
prediction.compare <- data.frame("Год"=src$year[(kObservationNum + 1):nrows],
"Наблюдение"=src$temperature[(kObservationNum + 1):nrows],
"Прогноз"=prediction$var1.pred+trend[(kObservationNum + 1):nrows],
"Тренд"=trend[(kObservationNum + 1):nrows],
"Ошибка"=residual)
colnames(prediction.compare) <- c("", "$X(t)$", "$X^{*}(t)$", "$y(t)$", "$ X(t) - X^{*}(t) $")
print(xtable(prediction.compare, caption=caption, label=paste0("table:", name, "-prediction"), digits=c(0, 0, 3, 3, 3, 3), align="rr|cccc"),
file=paste0("out/variogram/", name, "-prediction.tex"), sanitize.text.function=function(x){x}, include.rownames=FALSE, table.placement=place, caption.placement = 'top')
WriteCharacteristic(mse, type="variogram", name=paste0(name, "-mse"))
list(variogram=variogram, prediction=prediction, residual=residual, mse=mse)
}
trend <- computeTrend(sample.fit)
sample.residuals <- sample.fit$residuals
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
sample.hscat <- DrawHScatterplot(sample.residuals[1:kObservationNum])
sample.hscat
vex <- ComputeVariogram(data=c(1,2,3,4,5,6,7,8), x=c(1:8), cressie=FALSE, cutoff=6, observations=8)
kex <- PredictWithKriging(c(1,2,3,4,5,6,7,8), x=c(1:8), observations=8, variogram_model = vex$var_model, nrows=8, pred=c(4))
fit = lm(src$temperature[1:32] ~ c(1:32))
res <- fit$residuals #sapply(1:32, FUN=function(i) fit$residuals[[i]])
variogram <- vgm("Lin", nugget=0.3, range=6, psill=2)
kr <- PredictWithKriging(sample.residuals, x=ConvertYearsToNum(src$year), observation=32, variogram_model = variogram$var_model, nrows=38)
sample.residuals
sph.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Sph", name="sph-fit-adapt", psill=4, range=6.9, nugget=0.9, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
prediction.kriging
kriging
DrawCrossPrediction <- function(actual, trend, kriging, future) {
ggplot() + geom_line(data = actual, aes(x = year, y = temperature, linetype = "Наблюдение")) +
geom_line(data = kriging, aes(x = year, y = temperature, linetype = "Прогноз")) +
geom_ribbon(data = data.frame(kriging, lci = kriging$temperature - 1.96*kriging$se, uci = kriging$temperature + 1.96*kriging$se), aes(ymin=lci, ymax=uci), alpha=.3) +
geom_line(data = trend, aes(x = year, y = temperature, linetype = "Тренд")) +
scale_linetype_manual(name = "Lines", values = c(Наблюдение = "solid", Прогноз = "dotdash", Тренд = "dashed"), labels = c(expression(X(t)), expression(X^{"*"} * (t)), expression(y(t)))) +
scale_x_continuous(breaks = seq(min(actual$year), max(actual$year) + 5 + future, by = 1)) + xlab("Год наблюдения") +
scale_y_continuous(breaks = seq(16, 28, 0.5)) + ylab("Температура, ºС") +
theme(legend.title = element_blank()) + labs(color = "")
}
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
debugSource('~/uni/master-thesis/R/lib/draw.R')
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
data.frame(kriging, lci = kriging$temperature - 1.96*kriging$se, uci = kriging$temperature + 1.96*kriging$se)
kriging
source('~/uni/master-thesis/R/lib/kriging.R')
source('~/uni/master-thesis/R/lib/kriging.R')
per.fit.cv <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Per", name="per-fit-cv", psill=4.1, range=0.898, nugget=0.001, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE,
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
source('~/uni/master-thesis/R/predictor.R')
source('~/uni/master-thesis/R/predictor.R')
sph.fit.adapt <- ComputeManualVariogram(data=sample.residuals, x=sample$year, cressie=FALSE, cutoff=20, model="Sph", name="sph-fit-adapt", psill=4, range=6.9, nugget=0.9, fit=FALSE)
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
sph.fit.adapt.prediction <- processPrediction(data=sample.residuals, year=sample$year, variogram=sph.fit.adapt, cutoff=cutoff, name="sph-fit-adapt", caption="Прогнозные значения (модель $ \\widehat{\\gamma}_5(h) $)")
debugSource('~/uni/master-thesis/R/lib/draw.R')
kriging
debugSource('~/uni/master-thesis/R/lib/draw.R')
