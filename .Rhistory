source("R/archive/variogram_analysis/afv.R")
variogram.classical <- ComputeVariogram(data=research.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=FALSE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/classical-empirical.png",
file_modeled="figures/variogram/classical-modeled.png")
variogram.robust <- ComputeVariogram(data=src.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=TRUE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/robust-empirical.png",
file_modeled="figures/variogram/robust-modeled.png")
Fitted1 <- data.frame(dist = seq(.01, max(variogram.manual$exp_var$dist), length = kObservationNum))
Fitted1$gamma <- variogramLine(variogram.manual$var_model, dist_vector = Fitted1$dist)$gamma
#convert the dataframes to a long format
Empirical1 <- melt(variogram.manual$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled1 <- melt(Fitted1, id.vars = "dist", measure.vars = c("gamma"))
Fitted2 <- data.frame(dist = seq(.01, max(variogram.classical$exp_var$dist), length = kObservationNum))
Fitted2$gamma <- variogramLine(variogram.classical$var_model, dist_vector = Fitted2$dist)$gamma
#convert the dataframes to a long format
Empirical2 <- melt(variogram.classical$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled2 <- melt(Fitted2, id.vars = "dist", measure.vars = c("gamma"))
plot.modeled <- ggplot(Empirical1, aes(x = dist, y = value)) +  geom_point() +
geom_line(data = Modeled1, linetype="dashed") +
geom_line(data = Modeled2) +
labs(color="") +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(variogram.manual$exp_var$gamma), 1),
limits=c(min(0, 1.04 * min(variogram.manual$exp_var$gamma)), 1.04 * max(variogram.manual$exp_var$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(variogram.manual$exp_var$dist), 1),
limits=c(0, 1.04 * max(variogram.manual$exp_var$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file="figures/14_var_models.png", width=7, height=4)
values of v2 to v1
Fitted1 <- data.frame(dist = seq(.01, max(variogram.manual$exp_var$dist), length = kObservationNum))
Fitted1$gamma <- variogramLine(variogram.manual$var_model, dist_vector = Fitted1$dist)$gamma
#convert the dataframes to a long format
Empirical1 <- melt(variogram.manual$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled1 <- melt(Fitted1, id.vars = "dist", measure.vars = c("gamma"))
Fitted2 <- data.frame(dist = seq(.01, max(variogram.classical$exp_var$dist), length = kObservationNum))
Fitted2$gamma <- variogramLine(variogram.classical$var_model, dist_vector = Fitted2$dist)$gamma
#convert the dataframes to a long format
Empirical2 <- melt(variogram.classical$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled2 <- melt(Fitted2, id.vars = "dist", measure.vars = c("gamma"))
plot.modeled <- ggplot(Empirical1, aes(x = dist, y = value)) +  geom_point() +
geom_line(data = Modeled1, linetype="dashed") +
geom_line(data = Modeled2) +
labs(color="") +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(variogram.manual$exp_var$gamma), 1),
limits=c(min(0, 1.04 * min(variogram.manual$exp_var$gamma)), 1.04 * max(variogram.manual$exp_var$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(variogram.manual$exp_var$dist), 1),
limits=c(0, 1.04 * max(variogram.manual$exp_var$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file="figures/variogram/models-comparison.png", width=7, height=4)
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
src.nrows
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
c((kObservationNum + 1):(src.nrows + 0))
rep(1, src.nrows - kObservationNum)
## Calculates kriging prediction based on passed varigram model
PredictWithKriging <- function (data, x, y=rep(1, kObservationNum), variogram_model, future=0) {
src_data <- data.frame(cbind("x"=x, "y"=y, data))
coordinates(src_data) = ~x+y
new_data <- data.frame("X"=c((kObservationNum + 1):(src.nrows + future)), "Y"=rep(1, src.nrows - kObservationNum + future))
coordinates(new_data) = ~X+Y
krige(data~1, src_data, new_data, model=variogram_model)
}
PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
src_data
data
x
ConvertYearsToNum(research.data$year)
length(ConvertYearsToNum(research.data$year))
ConvertYearsToNum(c(2010,2011,2012))
source('~/study/diploma/R/lib/misc.R', echo=TRUE)
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
kriging.classical <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.classical$var_model)
kriging.robust    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.robust$var_model)
kriging.manual
kriging.classical
kriging.robust
research.data.trend
research.data.fit
research.data.fit$coefficients
research.data.fit$model
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.fit$model
research.data.fit
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.residuals <- research.data.fit$residuals
research.data.trend <- research.data.fit$fitted.values
research.data.trend
cutoff <- trunc(2 * kObservationNum / 3) # let it be "classical" value
#cutoff <- 2
# Make fake second coordinate
#p <- data.frame("X"=c(1:kObservationNum), "Y"=rep(1, kObservationNum))
# Calculate distances
#p.dist<-as.matrix(dist(p[,c("X", "Y")]))
#dist.breaks<-quantile(p.dist,seq(.1, .9, by=.1))
#coordinates(p) <- ~ X + Y
#p.breaks <- (0:cutoff) * 1
#hsc <- hscat(research.data.residuals[1:kObservationNum]~1, p, breaks=0:20)
#to.pdf(hsc,"figures/12_hscat.pdf", width=7, height=6)
# Compute variogram manually with choosed model (best what i could found)
variogram.manual <- ComputeManualVariogram(research.data.residuals, cutoff=cutoff, file=TRUE, file_modeled="figures/variogram/manual-model.png")
# Compute variogram with auto fit model using classical estimation
variogram.classical <- ComputeVariogram(data=research.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=FALSE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/classical-empirical.png",
file_modeled="figures/variogram/classical-modeled.png")
# Compute variogram with auto fit model using robust (cressie) estimation
variogram.robust <- ComputeVariogram(data=src.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=TRUE, cutoff=cutoff, width=FALSE,
file_empirical="figures/variogram/robust-empirical.png",
file_modeled="figures/variogram/robust-modeled.png")
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted1 <- data.frame(dist = seq(.01, max(variogram.manual$exp_var$dist), length = kObservationNum))
Fitted1$gamma <- variogramLine(variogram.manual$var_model, dist_vector = Fitted1$dist)$gamma
#convert the dataframes to a long format
Empirical1 <- melt(variogram.manual$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled1 <- melt(Fitted1, id.vars = "dist", measure.vars = c("gamma"))
Fitted2 <- data.frame(dist = seq(.01, max(variogram.classical$exp_var$dist), length = kObservationNum))
Fitted2$gamma <- variogramLine(variogram.classical$var_model, dist_vector = Fitted2$dist)$gamma
#convert the dataframes to a long format
Empirical2 <- melt(variogram.classical$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled2 <- melt(Fitted2, id.vars = "dist", measure.vars = c("gamma"))
plot.modeled <- ggplot(Empirical1, aes(x = dist, y = value)) +  geom_point() +
geom_line(data = Modeled1, linetype="dashed") +
geom_line(data = Modeled2) +
labs(color="") +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(variogram.manual$exp_var$gamma), 1),
limits=c(min(0, 1.04 * min(variogram.manual$exp_var$gamma)), 1.04 * max(variogram.manual$exp_var$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(variogram.manual$exp_var$dist), 1),
limits=c(0, 1.04 * max(variogram.manual$exp_var$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file="figures/variogram/models-comparison.png", width=7, height=4)
kriging.manual    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.manual$var_model)
kriging.classical <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.classical$var_model)
kriging.robust    <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.robust$var_model)
mse.manual    <- MSE(CrossPrediction(src$temperature, src.trend, kriging.manual))
research.data.trend
research.data.fit$coefficients
research.data.fit$coefficients[1]
research.data.fit$coefficients[1,]
research.data.fit$coefficients[1][1]
research.data.fit$coefficients[[1]
]
research.data.fit$coefficients[[1]]
research.data.fit$coefficients[[1]] + 33*research.data.fit$coefficients[[2]]
research.data.fit$coefficients[[1]] + 34*research.data.fit$coefficients[[2]]
?apply
apply(c(33:38), FUN=function(x) research.data.fit$coefficients[[1]] + x*research.data.fit$coefficients[[2]])
lapply(c(33:38), FUN=function(x) research.data.fit$coefficients[[1]] + x*research.data.fit$coefficients[[2]])
sapply(c(33:38), FUN=function(x) research.data.fit$coefficients[[1]] + x*research.data.fit$coefficients[[2]])
completeTrend <- function (fit, future=0) {
с(fit$trend, sapply(c((kObservationNum + 1):(src.nrows + futu
}
completeTrend <- function (fit, future=0) {
с(fit$trend, sapply(c((kObservationNum + 1):(src.nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
completeTrend(research.data.fit)
c(1,2)
completeTrend <- function (fit, future=0) {
c(fit$fitted.values, sapply(c((kObservationNum + 1):(src.nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
completeTrend(research.data.fit)
completeTrend(research.data.fit)[1]
completeTrend(research.data.fit)[33]
research.data.fit$fitted.values
research.data.fit$fitted.values[1,]
research.data.fit$fitted.values[1]
research.data.fit$fitted.values[[1]]
research.data.fit$fitted.values[,]
research.data.fit$fitted.values[]
sapply(c(1:32), FUN=function(x) research.data.fit$coefficients[[1]] + x*research.data.fit$coefficients[[2]])
# Completes trend values to source observation number
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (src.nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
research.data.trend <- completeTrend(research.data.fit)
research.data.trend
computeTrend <- function (fit, future=0) {
c(sapply(c(1 : (src.nrows + future)), FUN=function(x) fit$coefficients[[1]] + x * fit$coefficients[[2]]))
}
research.data.fit <- lm(research.data$temperature ~ ConvertYearsToNum(research.data$year))
research.data.residuals <- research.data.fit$residuals
research.data.trend <- completeTrend(research.data.fit)
research.data.trend
completeTrend(research.data.fit)
c(sapply(c(1 : (src.nrows + future)), FUN=function(x) research.data.fit$coefficients[[1]] + x * research.data.fit$coefficients[[2]]))
c(sapply(c(1 : (src.nrows)), FUN=function(x) research.data.fit$coefficients[[1]] + x * research.data.fit$coefficients[[2]]))
research.data.trend <- computeTrend(research.data.fit)
research.data.trend
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, src.trend, kriging.manual))
CrossPrediction <- function (temperature, years, trend, kriging, file_prediction="", future=0) {
prediction.trend <- data.frame("temperature"=c(temperature[(kObservationNum - 1):kObservationNum], trend[(kObservationNum + 1):src.nrows]),
"year"=GetPredictionYears(years, src.nrows, future))
prediction.kriging <- data.frame("temperature"=c(temperature[(kObservationNum - 1):kObservationNum], trend[(kObservationNum + 1):src.nrows] + kriging$var1.pred),
"year"=GetPredictionYears(years, src.nrows, future))
actual <- data.frame("temperature"=temperature[(kObservationNum - 1):src.nrows],
"year"=GetPredictionYears(years, src.nrows, 0))
if (nchar(file_prediction)) {
plot.crossprediction <- ggplot() +
geom_line(data=prediction.kriging, aes(x=year, y=temperature, color="Прогноз Кригинг")) +
geom_line(data=prediction.trend, aes(x=year, y=temperature, color="Прогноз Тренд")) +
geom_line(data=actual, aes(x=year, y=temperature, colour="Актуальное")) +
labs(color="") +
scale_x_continuous(breaks=seq(min(actual$year), max(actual$year) + 5 + future, by=1)) + xlab("Год наблюдения") +
scale_y_continuous(breaks=seq(16, 28, .5)) + ylab("Температура, С") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
labs(color="")
ggsave(plot=plot.crossprediction, file=file_prediction, width=7, height=4)
}
prediction.kriging$Temperature[3:(src.nrows-kObservationNum)] - actual$Temperature[3:(src.nrows - kObservationNum)] ## what the heck? why 3?
}
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, src.trend, kriging.manual))
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual))
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual))
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
temperature
prediction.trend
temperature[(kObservationNum - 1):kObservationNum]
trend[(kObservationNum + 1):src.nrows]
kriging$var1.pred
length(kriging$var1.pred)
length(trend[(kObservationNum + 1):src.nrows])
GetPredictionYears(years, src.nrows, future)
length(GetPredictionYears(years, src.nrows, future))
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual))
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual))
source('~/study/diploma/R/variogram.R', echo=TRUE)
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual))
mse.classical <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.classical))
mse.robust    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust))
mse.classical
mse.manual
mse.robust
res.ma <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual, "figures/variogrma/cross-prediction-manual.png")
res.ma <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual, "figures/variogram/cross-prediction-manual.png")
res.cl <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.classical, "figures/variogram/cross-prediction-classical.png")
res.ro <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust, "figures/variogram/cross-prediction-robust.png")
cutoff
variogram.robust.best <- ComputeVariogram(data=research.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=TRUE, cutoff=6, width=FALSE,
file=TRUE,
file_empirical="figures/variogram/robust-best-empirical.png",
file_modeled="figures/variogram/robust-best-modeled.png")
variogram.robust.best <- ComputeVariogram(data=research.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=TRUE, cutoff=6, width=FALSE,
file_empirical="figures/variogram/robust-best-empirical.png",
file_modeled="figures/variogram/robust-best-modeled.png")
variogram.robust.best <- ComputeVariogram(data=research.data.residuals, x=ConvertYearsToNum(research.data$year), cressie=TRUE, cutoff=21, width=FALSE,
file_empirical="figures/variogram/robust-best-empirical.png",
file_modeled="figures/variogram/robust-best-modeled.png")
kriging.robust.best <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.robust.best$var_model, future=3)
mse.robust.best <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust.best))
mse.manual    <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.manual))
kriging.robust.best <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.robust.best$var_model, future=3)
mse.robust.best <- MSE(CrossPrediction(src.data$temperature, src.data$year, computeTrend(research.data.fit, future=3), kriging.robust.best))
mse.robust.best <- MSE(CrossPrediction(src.data$temperature, src.data$year, computeTrend(research.data.fit, future=3), kriging.robust.best))
trend
kriging$var1.pred
length(kriging$var1.pred)
length(trend[(kObservationNum + 1):src.nrows])
length(trend[(kObservationNum + 1):(src.nrows+future)])
future
length(trend[(kObservationNum + 1):(src.nrows+3)])
mse.robust.best <- MSE(CrossPrediction(src.data$temperature, src.data$year, computeTrend(research.data.fit, future=3), kriging.robust.best, future=3))
kriging.robust.best <- PredictWithKriging(research.data.residuals, x=ConvertYearsToNum(research.data$year), variogram_model=variogram.robust.best$var_model)
mse.robust.best <- MSE(CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust.best))
res.ro.best <- CrossPrediction(src.data$temperature, src.data$year, research.data.trend, kriging.robust.best, "figures/variogram/cross-prediction-robust-best.png")
compareClassicalModels <- function(manual, classical, filename) {
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted1 <- data.frame(dist = seq(.01, max(manual$exp_var$dist), length = kObservationNum))
Fitted1$gamma <- variogramLine(manual$var_model, dist_vector = Fitted1$dist)$gamma
#convert the dataframes to a long format
Empirical1 <- melt(manual$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled1 <- melt(Fitted1, id.vars = "dist", measure.vars = c("gamma"))
Fitted2 <- data.frame(dist = seq(.01, max(classical$exp_var$dist), length = kObservationNum))
Fitted2$gamma <- variogramLine(classical$var_model, dist_vector = Fitted2$dist)$gamma
#convert the dataframes to a long format
Empirical2 <- melt(classical$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled2 <- melt(Fitted2, id.vars = "dist", measure.vars = c("gamma"))
plot.modeled <- ggplot(Empirical1, aes(x = dist, y = value)) +  geom_point() +
geom_line(data = Modeled1, linetype="dashed") +
geom_line(data = Modeled2) +
labs(color="") +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(manual$exp_var$gamma), 1),
limits=c(min(0, 1.04 * min(manual$exp_var$gamma)), 1.04 * max(manual$exp_var$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(manual$exp_var$dist), 1),
limits=c(0, 1.04 * max(manual$exp_var$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file=filename, width=7, height=4)
plot.modeled
}
models.comparison <- compareClassicalModels(variogram.manual, variogram.classical, filename="figures/variogram/models-comparison.png")
source('~/study/diploma/R/variogram.R', echo=TRUE)
ComparePredictionParameters <- function (data, temperature, trend, x, y=rep(1, kObservationNum), width=1) {
lens <- 1:kObservationNum
manualResult <- c()
classicalResult <- c()
robustResult <- c()
spdata <- data.frame(cbind("x"=x, "y"=y, data))
coordinates(spdata)=~x+y
i <- 1
for(l in lens) {
variogram.manual    = ComputeManualVariogram(data, cutoff=l)
variogram.classical = autofitVariogram(data~1, spdata, cutoff=l, cressie=FALSE, width=width)
variogram.robust    = autofitVariogram(data~1, spdata, cutoff=l, cressie=TRUE, width=width)
kriging.manual    <- PredictWithKriging(data, x=x, variogram_model=variogram.manual$var_model)
kriging.classical <- PredictWithKriging(data, x=x, variogram_model=variogram.classical$var_model)
kriging.robust    <- PredictWithKriging(data, x=x, variogram_model=variogram.robust$var_model)
res.manual    <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.manual)
res.classical <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.classical)
res.robust    <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.robust)
manualResult[i] <- MSE(e=res.manual)
classicalResult[i] <- MSE(e=res.classical)
robustResult[i] <- MSE(e=res.robust)
i = i + 1 ## todo: find out how to avoid this construction
}
plot.check <- ggplot() +
geom_line(data=data.frame("X"=lens, "Y"=manualResult), aes(x=X,y=Y)) +
geom_line(data=data.frame("X"=lens, "Y"=classicalResult), aes(x=X,y=Y), linetype="dashed") +
geom_line(data=data.frame("X"=lens, "Y"=robustResult), aes(x=X,y=Y), linetype="dotdash") +
scale_x_continuous(breaks=lens) +
scale_y_continuous(breaks=seq(min(manualResult, classicalResult, robustResult), max(manualResult, classicalResult, robustResult), .3))
ggsave(plot=plot.check, file="figures/check-dep.png", width=7, height=4)
}
ComparePredictionParameters(research.data.residuals, research.data$year)
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
ComparePredictionParameters <- function (data, trend, x, y=rep(1, kObservationNum), width=1) {
lens <- 1:kObservationNum
manualResult <- c()
classicalResult <- c()
robustResult <- c()
spdata <- data.frame(cbind("x"=x, "y"=y, data))
coordinates(spdata)=~x+y
i <- 1
for(l in lens) {
variogram.manual    = ComputeManualVariogram(data, cutoff=l)
variogram.classical = autofitVariogram(data~1, spdata, cutoff=l, cressie=FALSE, width=width)
variogram.robust    = autofitVariogram(data~1, spdata, cutoff=l, cressie=TRUE, width=width)
kriging.manual    <- PredictWithKriging(data, x=x, variogram_model=variogram.manual$var_model)
kriging.classical <- PredictWithKriging(data, x=x, variogram_model=variogram.classical$var_model)
kriging.robust    <- PredictWithKriging(data, x=x, variogram_model=variogram.robust$var_model)
res.manual    <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.manual)
res.classical <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.classical)
res.robust    <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.robust)
manualResult[i] <- MSE(e=res.manual)
classicalResult[i] <- MSE(e=res.classical)
robustResult[i] <- MSE(e=res.robust)
i = i + 1 ## todo: find out how to avoid this construction
}
plot.check <- ggplot() +
geom_line(data=data.frame("X"=lens, "Y"=manualResult), aes(x=X,y=Y)) +
geom_line(data=data.frame("X"=lens, "Y"=classicalResult), aes(x=X,y=Y), linetype="dashed") +
geom_line(data=data.frame("X"=lens, "Y"=robustResult), aes(x=X,y=Y), linetype="dotdash") +
scale_x_continuous(breaks=lens) +
scale_y_continuous(breaks=seq(min(manualResult, classicalResult, robustResult), max(manualResult, classicalResult, robustResult), .3))
ggsave(plot=plot.check, file="figures/check-dep.png", width=7, height=4)
}
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
spdata
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
manualResult
classicalREsult
classicalResult
robustResult
ComparePredictionParameters <- function (data, trend, x, y=rep(1, kObservationNum), width=1) {
lens <- 1:kObservationNum
manualResult <- c()
classicalResult <- c()
robustResult <- c()
spdata <- data.frame(cbind("x"=x, "y"=y, data))
coordinates(spdata)=~x+y
i <- 1
for(l in lens) {
variogram.manual    = ComputeManualVariogram(data, cutoff=l)
variogram.classical = autofitVariogram(data~1, spdata, cutoff=l, cressie=FALSE, width=width)
variogram.robust    = autofitVariogram(data~1, spdata, cutoff=l, cressie=TRUE, width=width)
kriging.manual    <- PredictWithKriging(data, x=x, variogram_model=variogram.manual$var_model)
kriging.classical <- PredictWithKriging(data, x=x, variogram_model=variogram.classical$var_model)
kriging.robust    <- PredictWithKriging(data, x=x, variogram_model=variogram.robust$var_model)
res.manual    <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.manual)
res.classical <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.classical)
res.robust    <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.robust)
manualResult[i] <- MSE(e=res.manual)
classicalResult[i] <- MSE(e=res.classical)
robustResult[i] <- MSE(e=res.robust)
i = i + 1 ## todo: find out how to avoid this construction
}
plot.check <- ggplot() +
geom_line(data=data.frame("X"=lens, "Y"=manualResult), aes(x=X,y=Y)) +
geom_line(data=data.frame("X"=lens, "Y"=classicalResult), aes(x=X,y=Y), linetype="dashed") +
geom_line(data=data.frame("X"=lens, "Y"=robustResult), aes(x=X,y=Y), linetype="dotdash") +
scale_x_continuous(breaks=lens) +
scale_y_continuous(breaks=seq(min(classicalResult, robustResult), max(classicalResult, robustResult), .3))
ggsave(plot=plot.check, file="figures/check-dep.png", width=7, height=4)
}
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
seq(min(classicalResult, robustResult), max(classicalResult, robustResult), .3)
min(classicalResult, robustResult)
max(classicalResult, robustResult)
MSE <- function (e, N=1) {
sum(sapply(X=e, FUN=function(x) x**2)) / length(e)
}
MSE <- function (e, N=1) {
sum(sapply(X=e, FUN=function(x) x**2)) / length(e)
}
MSE <- function (e, N=1) {
sum(sapply(X=e, FUN=function(x) x**2)) / length(e)
}
CompareClassicalModels <- function(manual, classical, filename) {
# Arrange the data for the ggplot2 plot
# add the semivariance values of v2 to v1
Fitted1 <- data.frame(dist = seq(.01, max(manual$exp_var$dist), length = kObservationNum))
Fitted1$gamma <- variogramLine(manual$var_model, dist_vector = Fitted1$dist)$gamma
#convert the dataframes to a long format
Empirical1 <- melt(manual$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled1 <- melt(Fitted1, id.vars = "dist", measure.vars = c("gamma"))
Fitted2 <- data.frame(dist = seq(.01, max(classical$exp_var$dist), length = kObservationNum))
Fitted2$gamma <- variogramLine(classical$var_model, dist_vector = Fitted2$dist)$gamma
#convert the dataframes to a long format
Empirical2 <- melt(classical$exp_var, id.vars = "dist", measure.vars = c("gamma"))
Modeled2 <- melt(Fitted2, id.vars = "dist", measure.vars = c("gamma"))
plot.modeled <- ggplot(Empirical1, aes(x = dist, y = value)) +  geom_point() +
geom_line(data = Modeled1, linetype="dashed") +
geom_line(data = Modeled2) +
labs(color="") +
scale_y_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(manual$exp_var$gamma), 1),
limits=c(min(0, 1.04 * min(manual$exp_var$gamma)), 1.04 * max(manual$exp_var$gamma))) +
scale_x_continuous(expand=c(0,0),
breaks=seq(0, 1.04 * max(manual$exp_var$dist), 1),
limits=c(0, 1.04 * max(manual$exp_var$dist))) +
xlab("Расстояние") + ylab("Значение")
ggsave(plot=plot.modeled, file=filename, width=7, height=4)
plot.modeled
}
ComparePredictionParameters <- function (data, trend, x, y=rep(1, kObservationNum), width=1) {
lens <- 1:kObservationNum
manualResult <- c()
classicalResult <- c()
robustResult <- c()
spdata <- data.frame(cbind("x"=x, "y"=y, data))
coordinates(spdata)=~x+y
i <- 1
for(l in lens) {
variogram.manual    = ComputeManualVariogram(data, cutoff=l)
variogram.classical = autofitVariogram(data~1, spdata, cutoff=l, cressie=FALSE, width=width)
variogram.robust    = autofitVariogram(data~1, spdata, cutoff=l, cressie=TRUE, width=width)
kriging.manual    <- PredictWithKriging(data, x=x, variogram_model=variogram.manual$var_model)
kriging.classical <- PredictWithKriging(data, x=x, variogram_model=variogram.classical$var_model)
kriging.robust    <- PredictWithKriging(data, x=x, variogram_model=variogram.robust$var_model)
res.manual    <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.manual)
res.classical <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.classical)
res.robust    <- CrossPrediction(src.data$temperature, src.data$year, trend, kriging.robust)
manualResult[i] <- MSE(e=res.manual)
classicalResult[i] <- MSE(e=res.classical)
robustResult[i] <- MSE(e=res.robust)
i = i + 1 ## todo: find out how to avoid this construction
}
plot.check <- ggplot() +
geom_line(data=data.frame("X"=lens, "Y"=manualResult), aes(x=X,y=Y)) +
geom_line(data=data.frame("X"=lens, "Y"=classicalResult), aes(x=X,y=Y), linetype="dashed") +
geom_line(data=data.frame("X"=lens, "Y"=robustResult), aes(x=X,y=Y), linetype="dotdash") +
scale_x_continuous(breaks=lens) +
scale_y_continuous(breaks=seq(min(classicalResult, robustResult), max(classicalResult, robustResult), .3))
ggsave(plot=plot.check, file="figures/check-dep.png", width=7, height=4)
}
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
min(classicalResult, robustResult)
max(classicalResult, robustResult)
source('~/.active-rstudio-document', echo=TRUE)
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
ComparePredictionParameters(research.data.residuals, research.data.trend, research.data$year)
res.manual
data
trend
ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year))
debugSource('~/study/diploma/R/variogram.R', echo=TRUE)
library(ggplot2)  # eye-candy graphs
library(xtable)   # convert data to latex tables
library(outliers) # tests for outliers
library(tseries)  # adf test used
library(nortest)  # tests for normality
library(sp)       # spatial data
library(gstat)    # geostatistics
library(reshape2) # will see
ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year))
source('~/study/diploma/R/variogram.R', echo=TRUE)
ComparePredictionParameters(research.data.residuals, research.data.trend, ConvertYearsToNum(research.data$year))
source('~/study/diploma/R/variogram.R', echo=TRUE)
